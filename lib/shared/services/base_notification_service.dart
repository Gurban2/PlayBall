import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';

/// –ë–∞–∑–æ–≤—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
abstract class BaseNotificationService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final Uuid _uuid = const Uuid();

  /// –ù–∞–∑–≤–∞–Ω–∏–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –≤ Firestore
  String get collectionName;

  /// –ì–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID
  String generateId() => _uuid.v4();

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
  void logSuccess(String operation, {int? count, String? details}) {
    if (count != null) {
      debugPrint('‚úÖ $operation: $count —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π${details != null ? ' - $details' : ''}');
    } else {
      debugPrint('‚úÖ $operation${details != null ? ': $details' : ''}');
    }
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–æ–∫
  void logError(String operation, dynamic error) {
    debugPrint('‚ùå –û—à–∏–±–∫–∞ $operation: $error');
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π
  void logWarning(String message) {
    debugPrint('‚ö†Ô∏è $message');
  }

  /// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
  void logInfo(String message) {
    debugPrint('üîç $message');
  }

  /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫
  Future<T> executeWithLogging<T>(
    String operationName,
    Future<T> Function() operation, {
    String? successDetails,
    bool rethrowErrors = true,
  }) async {
    try {
      final result = await operation();
      logSuccess(operationName, details: successDetails);
      return result;
    } catch (e) {
      logError(operationName, e);
      if (rethrowErrors) rethrow;
      throw e;
    }
  }

  /// –í—ã–ø–æ–ª–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é –±–µ–∑ –≤–æ–∑–≤—Ä–∞—Ç–∞ –∑–Ω–∞—á–µ–Ω–∏—è
  Future<void> executeVoidWithLogging(
    String operationName,
    Future<void> Function() operation, {
    String? successDetails,
    bool rethrowErrors = true,
  }) async {
    await executeWithLogging<void>(
      operationName,
      operation,
      successDetails: successDetails,
      rethrowErrors: rethrowErrors,
    );
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —á–µ—Ä–µ–∑ batch –æ–ø–µ—Ä–∞—Ü–∏—é
  Future<void> sendBatchNotifications(
    List<Map<String, dynamic>> notifications,
    String operationName,
  ) async {
    if (notifications.isEmpty) {
      logWarning('–ù–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏: $operationName');
      return;
    }

    await executeVoidWithLogging(
      operationName,
      () async {
        final batch = _firestore.batch();
        
        for (final notificationData in notifications) {
          final docRef = _firestore
              .collection(collectionName)
              .doc(notificationData['id']);
          
          batch.set(docRef, notificationData);
        }

        await batch.commit();
      },
      successDetails: '${notifications.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ',
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –±–∞–∑–æ–≤–æ–π —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
  Future<List<Map<String, dynamic>>> getUserNotifications(
    String userId, {
    int limit = 50,
    String? whereField,
    dynamic whereValue,
  }) async {
    return executeWithLogging(
      '–ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId',
      () async {
        Query query = _firestore
            .collection(collectionName)
            .where('recipientIds', arrayContains: userId)
            .orderBy('createdAt', descending: true)
            .limit(limit);

        if (whereField != null && whereValue != null) {
          query = query.where(whereField, isEqualTo: whereValue);
        }

        final querySnapshot = await query.get();
        return querySnapshot.docs
            .map((doc) => {'id': doc.id, ...doc.data() as Map<String, dynamic>})
            .toList();
      },
      rethrowErrors: false,
    ).catchError((e) {
      logError('–ø–æ–ª—É—á–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId', e);
      return <Map<String, dynamic>>[];
    });
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä–∏–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Stream<List<Map<String, dynamic>>> getUserNotificationsStream(
    String userId, {
    int limit = 50,
    String? whereField,
    dynamic whereValue,
  }) {
    Query query = _firestore
        .collection(collectionName)
        .where('recipientIds', arrayContains: userId)
        .orderBy('createdAt', descending: true)
        .limit(limit);

    if (whereField != null && whereValue != null) {
      query = query.where(whereField, isEqualTo: whereValue);
    }

    return query.snapshots().map((snapshot) => 
        snapshot.docs
            .map((doc) => {'id': doc.id, ...doc.data() as Map<String, dynamic>})
            .toList());
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  Future<void> markAsRead(String notificationId) async {
    await executeVoidWithLogging(
      '–æ—Ç–º–µ—Ç–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–≥–æ',
      () async {
        await _firestore
            .collection(collectionName)
            .doc(notificationId)
            .update({'isRead': true});
      },
      successDetails: 'ID: $notificationId',
    );
  }

  /// –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
  Future<void> markAllAsRead(String userId) async {
    await executeVoidWithLogging(
      '–æ—Ç–º–µ—Ç–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö',
      () async {
        final querySnapshot = await _firestore
            .collection(collectionName)
            .where('recipientIds', arrayContains: userId)
            .where('isRead', isEqualTo: false)
            .get();

        if (querySnapshot.docs.isEmpty) {
          logInfo('–ù–µ—Ç –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è $userId');
          return;
        }

        final batch = _firestore.batch();
        
        for (var doc in querySnapshot.docs) {
          batch.update(doc.reference, {'isRead': true});
        }

        await batch.commit();
      },
      successDetails: '–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å $userId',
    );
  }

  /// –£–¥–∞–ª–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> deleteNotification(String notificationId) async {
    await executeVoidWithLogging(
      '—É–¥–∞–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
      () async {
        await _firestore
            .collection(collectionName)
            .doc(notificationId)
            .delete();
      },
      successDetails: 'ID: $notificationId',
    );
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<int> getUnreadCount(String userId) async {
    return executeWithLogging(
      '–ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      () async {
        final querySnapshot = await _firestore
            .collection(collectionName)
            .where('recipientIds', arrayContains: userId)
            .where('isRead', isEqualTo: false)
            .get();

        return querySnapshot.docs.length;
      },
      rethrowErrors: false,
    ).catchError((e) {
      logError('–ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π', e);
      return 0;
    });
  }

  /// –£–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Å—Ç–∞—Ä—à–µ —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏)
  Future<void> cleanupOldNotifications(Duration maxAge) async {
    await executeVoidWithLogging(
      '–æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π',
      () async {
        final cutoffDate = DateTime.now().subtract(maxAge);
        final querySnapshot = await _firestore
            .collection(collectionName)
            .where('createdAt', isLessThan: Timestamp.fromDate(cutoffDate))
            .get();

        if (querySnapshot.docs.isEmpty) {
          logInfo('–ù–µ—Ç —Å—Ç–∞—Ä—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è');
          return;
        }

        final batch = _firestore.batch();
        
        for (var doc in querySnapshot.docs) {
          batch.delete(doc.reference);
        }

        await batch.commit();
      },
      successDetails: '—Å—Ç–∞—Ä—à–µ ${maxAge.inDays} –¥–Ω–µ–π',
    );
  }
} 