import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/foundation.dart';
import 'package:firebase_auth/firebase_auth.dart';
import '../features/auth/data/datasources/auth_service.dart';
import '../features/auth/data/datasources/user_service.dart';
import '../features/rooms/data/datasources/room_service.dart';
import '../features/teams/data/datasources/team_service.dart';
import '../features/teams/data/datasources/team_activity_service.dart';
import '../shared/services/storage_service.dart';
import '../features/auth/domain/entities/user_model.dart';
import '../features/rooms/domain/entities/room_model.dart';
import '../features/teams/domain/entities/team_model.dart';
import '../features/teams/domain/entities/team_activity_check_model.dart';
import '../features/teams/data/datasources/team_victory_service.dart';
import '../features/notifications/data/datasources/game_notification_service.dart';
import '../features/notifications/data/datasources/unified_notification_service.dart';

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–ª—è —Å–µ—Ä–≤–∏—Å–æ–≤
final authServiceProvider = Provider<AuthService>((ref) {
  return AuthService();
});

final roomServiceProvider = Provider<RoomService>((ref) {
  return RoomService();
});

final userServiceProvider = Provider<UserService>((ref) {
  return UserService();
});

final teamServiceProvider = Provider<TeamService>((ref) {
  return TeamService();
});

final teamActivityServiceProvider = Provider<TeamActivityService>((ref) {
  final teamService = ref.read(teamServiceProvider);
  final gameNotificationService = ref.read(gameNotificationServiceProvider);
  return TeamActivityService(teamService, gameNotificationService);
});

// Firebase Storage –æ—Ç–∫–ª—é—á–µ–Ω –∏–∑-–∑–∞ CORS –æ—à–∏–±–æ–∫, –∏—Å–ø–æ–ª—å–∑—É–µ–º S3
// final storageServiceProvider = Provider<StorageService>((ref) {
//   return StorageService();
// });

// === NOTIFICATION PROVIDERS ===

/// –°–µ—Ä–≤–∏—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–≥—Ä–∞—Ö
final gameNotificationServiceProvider = Provider<GameNotificationService>((ref) {
  return GameNotificationService();
});

/// Stream –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –∏–≥—Ä–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final gameNotificationsStreamProvider = StreamProvider.family<List<dynamic>, String>((ref, userId) {
  final gameNotificationService = ref.read(gameNotificationServiceProvider);
  return gameNotificationService.getGameNotificationsStream(userId);
});

/// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö –∏–≥—Ä–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
final unreadGameNotificationsCountProvider = FutureProvider.family<int, String>((ref, userId) async {
  final gameNotificationService = ref.read(gameNotificationServiceProvider);
  return await gameNotificationService.getUnreadCount(userId);
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è UnifiedNotificationService
final unifiedNotificationServiceProvider = Provider<UnifiedNotificationService>((ref) {
  final userService = ref.read(userServiceProvider);
  final teamService = ref.read(teamServiceProvider);
  return UnifiedNotificationService(userService, teamService);
});

/// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
final unreadSocialNotificationsCountProvider = FutureProvider.family<int, String>((ref, userId) async {
  final unifiedNotificationService = ref.read(unifiedNotificationServiceProvider);
  return await unifiedNotificationService.getUnreadNotificationsCount(userId);
});

/// –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∏–≥—Ä–æ–≤—ã–µ + —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ)
final totalUnreadNotificationsCountProvider = StreamProvider.family<int, String>((ref, userId) {
  final gameNotificationService = ref.read(gameNotificationServiceProvider);
  
  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∏–≥—Ä–æ–≤—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
  return gameNotificationService.getGameNotificationsStream(userId).asyncMap((gameNotifications) async {
    try {
      // –°—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ –∏–≥—Ä–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      final gameUnreadCount = gameNotifications
          .where((notification) => !notification.isRead)
          .length;
      
      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      final unifiedNotificationService = ref.read(unifiedNotificationServiceProvider);
      final socialUnreadCount = await unifiedNotificationService.getUnreadNotificationsCount(userId);
      
      final totalCount = gameUnreadCount + socialUnreadCount;
      debugPrint('üîî –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –¥–ª—è $userId: $totalCount (–∏–≥—Ä–æ–≤—ã–µ: $gameUnreadCount, —Å–æ—Ü–∏–∞–ª—å–Ω—ã–µ: $socialUnreadCount)');
      return totalCount;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
      return 0;
    }
  });
});

/// –ê–≤—Ç–æ–∏–Ω–≤–∞–ª–∏–¥–∏—Ä—É–µ–º—ã–π –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å —Ç–∞–π–º–µ—Ä–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
final notificationCountTimerProvider = StreamProvider.family<int, String>((ref, userId) {
  return Stream.periodic(const Duration(seconds: 30), (_) => DateTime.now().millisecondsSinceEpoch)
      .asyncMap((_) async {
        final count = await ref.read(totalUnreadNotificationsCountProvider(userId).future);
        return count;
      });
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final currentUserProvider = StreamProvider<UserModel?>((ref) {
  final authService = ref.read(authServiceProvider);
  
  // –°–ª—É—à–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Firebase
  return FirebaseAuth.instance.authStateChanges().asyncMap((firebaseUser) async {
    if (firebaseUser == null) {
      return null;
    }
    
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω, –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ –ø–æ–ª–Ω—É—é –º–æ–¥–µ–ª—å
    return await authService.getCurrentUserModel();
  });
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
final activeRoomsProvider = StreamProvider<List<RoomModel>>((ref) {
  final roomService = ref.read(roomServiceProvider);
  return roomService.watchActiveRooms();
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
final plannedRoomsProvider = StreamProvider<List<RoomModel>>((ref) {
  final roomService = ref.read(roomServiceProvider);
  return roomService.watchPlannedRooms();
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã —Å real-time –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏
final roomProvider = StreamProvider.family<RoomModel?, String>((ref, roomId) {
  final roomService = ref.read(roomServiceProvider);
  return roomService.watchRoom(roomId);
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–æ–º–∞–Ω–¥ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ–º–Ω–∞—Ç—ã
final teamsProvider = StreamProvider.family<List<TeamModel>, String>((ref, roomId) {
  final teamService = ref.read(teamServiceProvider);
  return teamService.watchTeamsForRoom(roomId);
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final userProvider = StreamProvider.family<UserModel?, String>((ref, userId) {
  final userService = ref.read(userServiceProvider);
  return userService.watchUser(userId);
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç (–¥–ª—è –ø–æ–∏—Å–∫–∞)
final roomsProvider = StreamProvider<List<RoomModel>>((ref) {
  final roomService = ref.read(roomServiceProvider);
  return roomService.watchAllRooms();
});

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–Ω–∞—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
final userRoomsProvider = StreamProvider<List<RoomModel>>((ref) async* {
  final currentUser = await ref.watch(currentUserProvider.future);
  
  if (currentUser == null) {
    yield [];
    return;
  }
  
  final roomService = ref.read(roomServiceProvider);
  yield* roomService.watchUserRooms(currentUser.id);
});

// === TEAM ACTIVITY CHECK PROVIDERS ===

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
final playerActivityChecksProvider = StreamProvider.family<List<TeamActivityCheckModel>, String>((ref, playerId) {
  final teamService = ref.read(teamServiceProvider);
  return teamService.watchPlayerActivityChecks(playerId);
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
final activityCheckProvider = StreamProvider.family<TeamActivityCheckModel?, String>((ref, checkId) {
  final teamService = ref.read(teamServiceProvider);
  return teamService.watchActivityCheck(checkId);
});

/// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
final activeTeamActivityCheckProvider = FutureProvider.family<TeamActivityCheckModel?, String>((ref, teamId) async {
  final teamService = ref.read(teamServiceProvider);
  return await teamService.getActiveActivityCheck(teamId);
});

// === TEAM VICTORY PROVIDERS ===

/// –°–µ—Ä–≤–∏—Å –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥
final teamVictoryServiceProvider = Provider<TeamVictoryService>((ref) {
  final teamService = ref.read(teamServiceProvider);
  final notificationService = ref.read(gameNotificationServiceProvider);
  return TeamVictoryService(teamService, notificationService);
});

/// –¢–æ–ø –∫–æ–º–∞–Ω–¥ –ø–æ –±–∞–ª–ª–∞–º
final topTeamsProvider = FutureProvider<List<dynamic>>((ref) {
  final victoryService = ref.read(teamVictoryServiceProvider);
  return victoryService.getTopTeams(limit: 10);
});

/// –ò—Å—Ç–æ—Ä–∏—è –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥—ã
final teamVictoriesProvider = FutureProvider.family<List<dynamic>, String>((ref, teamId) {
  final victoryService = ref.read(teamVictoryServiceProvider);
  return victoryService.getTeamVictories(teamId, limit: 10);
});

/// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–æ–º–∞–Ω–¥—ã-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è –¥–ª—è –∏–≥—Ä—ã
final gameWinnerProvider = FutureProvider.family<dynamic, String>((ref, gameId) {
  final victoryService = ref.read(teamVictoryServiceProvider);
  return victoryService.getGameWinner(gameId);
});