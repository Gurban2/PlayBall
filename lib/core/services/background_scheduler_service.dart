import 'dart:async';
import '../providers.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:flutter/foundation.dart';

class BackgroundSchedulerService {
  static BackgroundSchedulerService? _instance;
  static BackgroundSchedulerService get instance => _instance ??= BackgroundSchedulerService._();
  
  BackgroundSchedulerService._();
  
  Timer? _timer;
  WidgetRef? _ref;
  
  void start(WidgetRef ref) {
    _ref = ref;
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç
    _timer = Timer.periodic(const Duration(minutes: 5), (_) {
      _updateGameStatuses();
    });
    
    // –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫ —Å—Ä–∞–∑—É
    _updateGameStatuses();
    
    debugPrint('üïí –§–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω (–ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–µ 5 –º–∏–Ω—É—Ç)');
  }
  
  void stop() {
    _timer?.cancel();
    _timer = null;
    _ref = null;
    debugPrint('üïí –§–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
  }
  
  Future<void> _updateGameStatuses() async {
    if (_ref == null) return;
    
    try {
      final roomService = _ref!.read(roomServiceProvider);
      
      debugPrint('üîÑ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä...');
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
      await roomService.autoStartScheduledGames();
      
      // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∏–≥—Ä—ã
      await roomService.autoCompleteExpiredGames();
      
      // –û—Ç–º–µ–Ω—è–µ–º –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∏–≥—Ä—ã
      await roomService.autoCancelExpiredPlannedGames();
      
      debugPrint('‚úÖ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–æ–≤ –∏–≥—Ä: $e');
    }
  }


}

// –ü—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ñ–æ–Ω–æ–≤–æ–≥–æ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
final backgroundSchedulerServiceProvider = Provider<BackgroundSchedulerService>((ref) {
  return BackgroundSchedulerService.instance;
}); 