import 'package:flutter/material.dart';
import '../utils/firebase_test.dart';
import '../services/auth_service.dart';
import '../services/firestore_service.dart';

class FirebaseTestScreen extends StatefulWidget {
  const FirebaseTestScreen({super.key});

  @override
  State<FirebaseTestScreen> createState() => _FirebaseTestScreenState();
}

class _FirebaseTestScreenState extends State<FirebaseTestScreen> {
  final AuthService _authService = AuthService();
  final FirestoreService _firestoreService = FirestoreService();
  
  String _testResults = '';
  bool _isLoading = false;
  bool _networkConnected = false;

  @override
  void initState() {
    super.initState();
    _checkNetworkConnection();
  }

  void _addResult(String result) {
    setState(() {
      _testResults += '${DateTime.now().toString().substring(11, 19)} $result\n';
    });
  }

  Future<void> _checkNetworkConnection() async {
    final connected = await FirebaseTestService.checkNetworkConnection();
    setState(() {
      _networkConnected = connected;
    });
  }

  Future<void> _testFirebaseConnection() async {
    setState(() {
      _isLoading = true;
      _testResults = '';
    });

    try {
      _addResult('üî• –ù–∞—á–∏–Ω–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Firebase...');
      await FirebaseTestService.testFirebaseConnection();
      _addResult('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase —É—Å–ø–µ—à–Ω–æ!');
      
      await FirebaseTestService.testFirestoreOperations();
      _addResult('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ —Å Firestore —Ä–∞–±–æ—Ç–∞—é—Ç!');
      
    } catch (e) {
      _addResult('‚ùå –û—à–∏–±–∫–∞: $e');
      
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Ä–µ—à–µ–Ω–∏—è
      if (e.toString().contains('PERMISSION_DENIED')) {
        _addResult('üí° –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ Firebase Console');
      } else if (e.toString().contains('timeout')) {
        _addResult('üí° –†–µ—à–µ–Ω–∏–µ: –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∏–Ω—Ç–µ—Ä–Ω–µ—Ç-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ');
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _testAuth() async {
    setState(() {
      _isLoading = true;
    });

    try {
      _addResult('üîê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final isLoggedIn = await _authService.isUserLoggedIn();
      _addResult('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω: $isLoggedIn');
      
      if (isLoggedIn) {
        final user = await _authService.getCurrentUserModel();
        _addResult('üìß Email: ${user?.email ?? "–ù–µ —É–∫–∞–∑–∞–Ω"}');
        _addResult('üë§ –ò–º—è: ${user?.name ?? "–ù–µ —É–∫–∞–∑–∞–Ω–æ"}');
      }
      
      _addResult('‚úÖ –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–≤–µ—Ä—à–µ–Ω');
      
    } catch (e) {
      _addResult('‚ùå –û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _testFirestore() async {
    setState(() {
      _isLoading = true;
    });

    try {
      _addResult('üìä –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Firestore...');
      
      // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
      final activeRooms = await _firestoreService.getActiveRooms();
      _addResult('üèê –ê–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç: ${activeRooms.length}');
      
      // –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∫–æ–º–Ω–∞—Ç—ã
      final plannedRooms = await _firestoreService.getPlannedRooms();
      _addResult('üìÖ –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–æ–º–Ω–∞—Ç: ${plannedRooms.length}');
      
      _addResult('‚úÖ –¢–µ—Å—Ç Firestore –∑–∞–≤–µ—Ä—à–µ–Ω');
      
    } catch (e) {
      _addResult('‚ùå –û—à–∏–±–∫–∞ Firestore: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _runFullDiagnostic() async {
    setState(() {
      _isLoading = true;
      _testResults = '';
    });

    try {
      _addResult('üîç –ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ Firebase...');
      
      // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–∏
      _addResult('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ç–µ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...');
      await _checkNetworkConnection();
      _addResult(_networkConnected ? '‚úÖ –°–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω–∞' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å —Å–µ—Ç—å—é');
      
      // 2. –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
      _addResult('2Ô∏è‚É£ –¢–µ—Å—Ç –±–∞–∑–æ–≤–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Firebase...');
      await FirebaseTestService.testFirebaseConnection();
      _addResult('‚úÖ –ë–∞–∑–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç');
      
      // 3. –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π Firestore
      _addResult('3Ô∏è‚É£ –¢–µ—Å—Ç –æ–ø–µ—Ä–∞—Ü–∏–π Firestore...');
      await FirebaseTestService.testFirestoreOperations();
      _addResult('‚úÖ –û–ø–µ—Ä–∞—Ü–∏–∏ Firestore —Ä–∞–±–æ—Ç–∞—é—Ç');
      
      // 4. –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏
      _addResult('4Ô∏è‚É£ –¢–µ—Å—Ç –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏...');
      final isLoggedIn = await _authService.isUserLoggedIn();
      _addResult(isLoggedIn ? '‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' : '‚ÑπÔ∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      
      _addResult('üéâ –ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      
    } catch (e) {
      _addResult('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: $e');
      
      // –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —Å–±—Ä–æ—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö WebChannel
      if (e.toString().contains('WebChannel') || e.toString().contains('transport')) {
        _addResult('üí° –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –ø—Ä–æ–±–ª–µ–º–∞ —Å WebChannel. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ.');
      }
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _resetFirestoreConnection() async {
    setState(() {
      _isLoading = true;
    });

    try {
      _addResult('üîÑ –°–±—Ä–æ—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è Firestore...');
      await FirebaseTestService.resetFirestoreConnection();
      _addResult('‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å–±—Ä–æ—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞
      _addResult('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ —Å–±—Ä–æ—Å–∞...');
      await _checkNetworkConnection();
      _addResult(_networkConnected ? '‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ' : '‚ùå –ü—Ä–æ–±–ª–µ–º—ã –æ—Å—Ç–∞–ª–∏—Å—å');
      
    } catch (e) {
      _addResult('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _diagnose400Error() async {
    setState(() {
      _isLoading = true;
    });

    try {
      _addResult('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –æ—à–∏–±–∫–∏ 400 Bad Request...');
      await FirebaseTestService.diagnose400Error();
      _addResult('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤—ã—à–µ');
      
    } catch (e) {
      _addResult('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _diagnoseAuthError() async {
    setState(() {
      _isLoading = true;
    });

    try {
      _addResult('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Firebase Authentication...');
      await FirebaseTestService.diagnoseAuthError();
      _addResult('‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Authentication –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
      
    } catch (e) {
      _addResult('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ Auth: $e');
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Firebase'),
        backgroundColor: Theme.of(context).colorScheme.primary,
        foregroundColor: Colors.white,
        actions: [
          // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ç–∏
          Container(
            margin: const EdgeInsets.only(right: 16),
            child: Row(
              mainAxisSize: MainAxisSize.min,
              children: [
                Icon(
                  _networkConnected ? Icons.wifi : Icons.wifi_off,
                  color: _networkConnected ? Colors.green : Colors.red,
                ),
                const SizedBox(width: 4),
                Text(
                  _networkConnected ? 'Online' : 'Offline',
                  style: TextStyle(
                    color: _networkConnected ? Colors.green : Colors.red,
                    fontSize: 12,
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.stretch,
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –∏ —Å—Ç–∞—Ç—É—Å
            Card(
              child: Padding(
                padding: const EdgeInsets.all(16.0),
                child: Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    const Text(
                      '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Firebase',
                      style: TextStyle(fontSize: 18, fontWeight: FontWeight.bold),
                    ),
                    const SizedBox(height: 8),
                    Row(
                      children: [
                        Icon(
                          _networkConnected ? Icons.check_circle : Icons.error,
                          color: _networkConnected ? Colors.green : Colors.red,
                          size: 16,
                        ),
                        const SizedBox(width: 8),
                        Text(
                          _networkConnected 
                              ? '–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Firebase –¥–æ—Å—Ç—É–ø–Ω–æ'
                              : '–ü—Ä–æ–±–ª–µ–º—ã —Å –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º –∫ Firebase',
                          style: TextStyle(
                            color: _networkConnected ? Colors.green : Colors.red,
                          ),
                        ),
                      ],
                    ),
                  ],
                ),
              ),
            ),
            
            const SizedBox(height: 16),
            
            // –ö–Ω–æ–ø–∫–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            Wrap(
              spacing: 8,
              runSpacing: 8,
              children: [
                ElevatedButton.icon(
                  onPressed: _isLoading ? null : _runFullDiagnostic,
                  icon: const Icon(Icons.medical_services),
                  label: const Text('–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.blue,
                    foregroundColor: Colors.white,
                  ),
                ),
                ElevatedButton.icon(
                  onPressed: _isLoading ? null : _testFirebaseConnection,
                  icon: const Icon(Icons.cloud),
                  label: const Text('–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è'),
                ),
                ElevatedButton.icon(
                  onPressed: _isLoading ? null : _testAuth,
                  icon: const Icon(Icons.person),
                  label: const Text('–¢–µ—Å—Ç Auth'),
                ),
                ElevatedButton.icon(
                  onPressed: _isLoading ? null : _testFirestore,
                  icon: const Icon(Icons.storage),
                  label: const Text('–¢–µ—Å—Ç Firestore'),
                ),
                ElevatedButton.icon(
                  onPressed: _isLoading ? null : _checkNetworkConnection,
                  icon: const Icon(Icons.refresh),
                  label: const Text('–û–±–Ω–æ–≤–∏—Ç—å —Å–µ—Ç—å'),
                ),
                ElevatedButton.icon(
                  onPressed: _isLoading ? null : _resetFirestoreConnection,
                  icon: const Icon(Icons.restart_alt),
                  label: const Text('–°–±—Ä–æ—Å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.orange,
                    foregroundColor: Colors.white,
                  ),
                ),
                ElevatedButton.icon(
                  onPressed: _isLoading ? null : _diagnose400Error,
                  icon: const Icon(Icons.bug_report),
                  label: const Text('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ 400'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.red,
                    foregroundColor: Colors.white,
                  ),
                ),
                ElevatedButton.icon(
                  onPressed: _isLoading ? null : _diagnoseAuthError,
                  icon: const Icon(Icons.security),
                  label: const Text('–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ Auth'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.purple,
                    foregroundColor: Colors.white,
                  ),
                ),
                ElevatedButton.icon(
                  onPressed: () {
                    setState(() {
                      _testResults = '';
                    });
                  },
                  icon: const Icon(Icons.clear),
                  label: const Text('–û—á–∏—Å—Ç–∏—Ç—å'),
                  style: ElevatedButton.styleFrom(
                    backgroundColor: Colors.grey,
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 16),
            
            // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
            if (_isLoading)
              const Card(
                child: Padding(
                  padding: EdgeInsets.all(16.0),
                  child: Row(
                    children: [
                      CircularProgressIndicator(),
                      SizedBox(width: 16),
                      Text('–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ...'),
                    ],
                  ),
                ),
              ),
            
            const SizedBox(height: 16),
            
            // –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            Expanded(
              child: Card(
                child: Padding(
                  padding: const EdgeInsets.all(12),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      const Text(
                        '–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:',
                        style: TextStyle(fontWeight: FontWeight.bold),
                      ),
                      const SizedBox(height: 8),
                      Expanded(
                        child: Container(
                          width: double.infinity,
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                            color: Colors.grey[100],
                            borderRadius: BorderRadius.circular(4),
                          ),
                          child: SingleChildScrollView(
                            child: Text(
                              _testResults.isEmpty 
                                  ? '–ù–∞–∂–º–∏—Ç–µ "–ü–æ–ª–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞" –¥–ª—è –∫–æ–º–ø–ª–µ–∫—Å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏\n–∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –æ—Ç–¥–µ–ª—å–Ω—ã–µ —Ç–µ—Å—Ç—ã –≤—ã—à–µ'
                                  : _testResults,
                              style: const TextStyle(
                                fontFamily: 'monospace',
                                fontSize: 12,
                              ),
                            ),
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),
            ),
          ],
        ),
      ),
    );
  }
} 