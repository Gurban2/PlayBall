import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';

import '../../../../core/providers.dart';
import '../../../../core/constants/constants.dart';
import '../../../../core/errors/error_handler.dart';

import '../../domain/entities/team_invitation_model.dart';
import '../../../auth/domain/entities/user_model.dart';

class TeamInvitationsScreen extends ConsumerStatefulWidget {
  const TeamInvitationsScreen({super.key});

  @override
  ConsumerState<TeamInvitationsScreen> createState() => _TeamInvitationsScreenState();
}

class _TeamInvitationsScreenState extends ConsumerState<TeamInvitationsScreen>
    with SingleTickerProviderStateMixin {
  
  late TabController _tabController;
  List<TeamInvitationModel> _incomingInvitations = [];
  List<TeamInvitationModel> _outgoingInvitations = [];
  bool _isLoading = false;
  UserModel? _currentUser;

  @override
  void initState() {
    super.initState();
    _currentUser = ref.read(currentUserProvider).value;
    // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±—ã—á–Ω—ã–π (UserRole.user), –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –≤–∫–ª–∞–¥–∫—É
    final tabCount = _currentUser?.role == UserRole.user ? 1 : 2;
    _tabController = TabController(length: tabCount, vsync: this);
    _loadInvitations();
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  Future<void> _loadInvitations() async {
    setState(() {
      _isLoading = true;
    });

    try {
      final user = ref.read(currentUserProvider).value;
      if (user != null) {
        _currentUser = user;
        final teamService = ref.read(teamServiceProvider);
        
        debugPrint('üîç –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${user.name} (ID: ${user.id}, —Ä–æ–ª—å: ${user.role})');
        
        final incomingFuture = teamService.getIncomingTeamInvitations(user.id);
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤ –∏ –∞–¥–º–∏–Ω–æ–≤
        if (user.role != UserRole.user) {
          debugPrint('üì§ –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞/–∞–¥–º–∏–Ω–∞');
          
          final outgoingFuture = teamService.getOutgoingTeamInvitations(user.id);
          final results = await Future.wait([incomingFuture, outgoingFuture]);
          
          debugPrint('üì• –í—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${results[0].length}');
          debugPrint('üì§ –ò—Å—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${results[1].length}');
          
          setState(() {
            _incomingInvitations = results[0];
            _outgoingInvitations = results[1];
          });
        } else {
          debugPrint('üë§ –û–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å - –∑–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –≤—Ö–æ–¥—è—â–∏–µ');
          
          final incomingInvitations = await incomingFuture;
          debugPrint('üì• –í—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è: ${incomingInvitations.length}');
          
          setState(() {
            _incomingInvitations = incomingInvitations;
            _outgoingInvitations = []; // –ü—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ –¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
          });
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π: $e');
      if (mounted) {
        ErrorHandler.showError(context, e);
      }
    } finally {
      if (mounted) {
        setState(() {
          _isLoading = false;
        });
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    // –ü–µ—Ä–µ—Å–æ–∑–¥–∞–µ–º TabController –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    final currentUser = ref.watch(currentUserProvider).value;
    if (currentUser != null && currentUser != _currentUser) {
      _currentUser = currentUser;
      final newTabCount = currentUser.role == UserRole.user ? 1 : 2;
      if (_tabController.length != newTabCount) {
        _tabController.dispose();
        _tabController = TabController(length: newTabCount, vsync: this);
      }
    }
    
    final showOutgoingTab = _currentUser?.role != UserRole.user;
    
    return Scaffold(
      backgroundColor: AppColors.background,
      appBar: AppBar(
        title: const Text('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã'),
        backgroundColor: AppColors.primary,
        foregroundColor: Colors.white,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadInvitations,
          ),
        ],
        bottom: TabBar(
          controller: _tabController,
          indicatorColor: Colors.white,
          labelColor: Colors.white,
          unselectedLabelColor: Colors.white70,
          tabs: [
            Tab(
              text: '–í—Ö–æ–¥—è—â–∏–µ (${_incomingInvitations.length})',
              icon: const Icon(Icons.inbox),
            ),
            if (showOutgoingTab)
              Tab(
                text: '–ò—Å—Ö–æ–¥—è—â–∏–µ (${_outgoingInvitations.length})',
                icon: const Icon(Icons.outbox),
              ),
          ],
        ),
      ),
      body: _isLoading
          ? const Center(child: CircularProgressIndicator())
          : TabBarView(
              controller: _tabController,
              children: [
                _buildIncomingTab(),
                if (showOutgoingTab) _buildOutgoingTab(),
              ],
            ),
    );
  }

  Widget _buildIncomingTab() {
    if (_incomingInvitations.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.inbox_outlined,
              size: 64,
              color: AppColors.textSecondary,
            ),
            SizedBox(height: 16),
            Text(
              '–ù–µ—Ç –≤—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π',
              style: TextStyle(
                fontSize: 16,
                color: AppColors.textSecondary,
              ),
            ),
          ],
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: _loadInvitations,
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: _incomingInvitations.length,
        itemBuilder: (context, index) {
          return _buildIncomingInvitationCard(_incomingInvitations[index]);
        },
      ),
    );
  }

  Widget _buildOutgoingTab() {
    if (_outgoingInvitations.isEmpty) {
      return const Center(
        child: Column(
          mainAxisAlignment: MainAxisAlignment.center,
          children: [
            Icon(
              Icons.outbox_outlined,
              size: 64,
              color: AppColors.textSecondary,
            ),
            SizedBox(height: 16),
            Text(
              '–ù–µ—Ç –∏—Å—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π',
              style: TextStyle(
                fontSize: 16,
                color: AppColors.textSecondary,
              ),
            ),
          ],
        ),
      );
    }

    return RefreshIndicator(
      onRefresh: _loadInvitations,
      child: ListView.builder(
        padding: const EdgeInsets.all(16),
        itemCount: _outgoingInvitations.length,
        itemBuilder: (context, index) {
          return _buildOutgoingInvitationCard(_outgoingInvitations[index]);
        },
      ),
    );
  }

  Widget _buildIncomingInvitationCard(TeamInvitationModel invitation) {
    return Card(
      elevation: 2,
      margin: const EdgeInsets.only(bottom: 12),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Row(
              children: [
                CircleAvatar(
                  radius: 20,
                  backgroundImage: invitation.fromUserPhotoUrl != null
                      ? NetworkImage(invitation.fromUserPhotoUrl!)
                      : null,
                  backgroundColor: AppColors.primary.withValues(alpha: 0.1),
                  child: invitation.fromUserPhotoUrl == null
                      ? Text(
                          _getInitials(invitation.fromUserName),
                          style: const TextStyle(
                            color: AppColors.primary,
                            fontWeight: FontWeight.bold,
                            fontSize: 14,
                          ),
                        )
                      : null,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        invitation.fromUserName,
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      Text(
                        '–ø—Ä–∏–≥–ª–∞—à–∞–µ—Ç –≤ –∫–æ–º–∞–Ω–¥—É "${invitation.teamName}"',
                        style: const TextStyle(
                          color: AppColors.textSecondary,
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–º–µ–Ω–µ
            if (invitation.replacedUserId != null) ...[
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: AppColors.warning.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    Icon(
                      Icons.swap_horiz,
                      color: AppColors.warning,
                      size: 16,
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        '–í—ã –∑–∞–º–µ–Ω—è–µ—Ç–µ –∏–≥—Ä–æ–∫–∞: ${invitation.replacedUserName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}',
                        style: TextStyle(
                          color: AppColors.warning,
                          fontSize: 12,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 12),
            ],
            
            // –í—Ä–µ–º—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            Text(
              '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${_formatDateTime(invitation.createdAt)}',
              style: const TextStyle(
                color: AppColors.textSecondary,
                fontSize: 12,
              ),
            ),
            
            const SizedBox(height: 16),
            
            // –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
            Row(
              children: [
                Expanded(
                  child: OutlinedButton(
                    onPressed: () => _declineInvitation(invitation),
                    style: OutlinedButton.styleFrom(
                      foregroundColor: AppColors.error,
                      side: const BorderSide(color: AppColors.error),
                    ),
                    child: const Text('–û—Ç–∫–ª–æ–Ω–∏—Ç—å'),
                  ),
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: ElevatedButton(
                    onPressed: () => _acceptInvitation(invitation),
                    style: ElevatedButton.styleFrom(
                      backgroundColor: AppColors.success,
                      foregroundColor: Colors.white,
                    ),
                    child: const Text('–ü—Ä–∏–Ω—è—Ç—å'),
                  ),
                ),
              ],
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildOutgoingInvitationCard(TeamInvitationModel invitation) {
    return Card(
      elevation: 2,
      margin: const EdgeInsets.only(bottom: 12),
      shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(12)),
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            // –ó–∞–≥–æ–ª–æ–≤–æ–∫
            Row(
              children: [
                CircleAvatar(
                  radius: 20,
                  backgroundImage: invitation.toUserPhotoUrl != null
                      ? NetworkImage(invitation.toUserPhotoUrl!)
                      : null,
                  backgroundColor: AppColors.secondary.withValues(alpha: 0.1),
                  child: invitation.toUserPhotoUrl == null
                      ? Text(
                          _getInitials(invitation.toUserName),
                          style: const TextStyle(
                            color: AppColors.secondary,
                            fontWeight: FontWeight.bold,
                            fontSize: 14,
                          ),
                        )
                      : null,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        invitation.toUserName,
                        style: const TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      Text(
                        '–ø—Ä–∏–≥–ª–∞—à–µ–Ω –≤ –∫–æ–º–∞–Ω–¥—É "${invitation.teamName}"',
                        style: const TextStyle(
                          color: AppColors.textSecondary,
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                ),
                Container(
                  padding: const EdgeInsets.symmetric(horizontal: 8, vertical: 4),
                  decoration: BoxDecoration(
                    color: AppColors.warning.withValues(alpha: 0.1),
                    borderRadius: BorderRadius.circular(6),
                  ),
                  child: Text(
                    invitation.statusDisplayName,
                    style: TextStyle(
                      color: AppColors.warning,
                      fontSize: 12,
                      fontWeight: FontWeight.w500,
                    ),
                  ),
                ),
              ],
            ),
            
            const SizedBox(height: 12),
            
            // –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–º–µ–Ω–µ
            if (invitation.replacedUserId != null) ...[
              Container(
                padding: const EdgeInsets.all(8),
                decoration: BoxDecoration(
                  color: AppColors.warning.withValues(alpha: 0.1),
                  borderRadius: BorderRadius.circular(8),
                ),
                child: Row(
                  children: [
                    Icon(
                      Icons.swap_horiz,
                      color: AppColors.warning,
                      size: 16,
                    ),
                    const SizedBox(width: 8),
                    Expanded(
                      child: Text(
                        '–ó–∞–º–µ–Ω—è–µ—Ç –∏–≥—Ä–æ–∫–∞: ${invitation.replacedUserName ?? "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"}',
                        style: TextStyle(
                          color: AppColors.warning,
                          fontSize: 12,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                    ),
                  ],
                ),
              ),
              const SizedBox(height: 12),
            ],
            
            // –í—Ä–µ–º—è –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
            Text(
              '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${_formatDateTime(invitation.createdAt)}',
              style: const TextStyle(
                color: AppColors.textSecondary,
                fontSize: 12,
              ),
            ),
            
            const SizedBox(height: 16),
            
            // –ö–Ω–æ–ø–∫–∞ –æ—Ç–º–µ–Ω—ã
            SizedBox(
              width: double.infinity,
              child: OutlinedButton(
                onPressed: () => _cancelInvitation(invitation),
                style: OutlinedButton.styleFrom(
                  foregroundColor: AppColors.error,
                  side: const BorderSide(color: AppColors.error),
                ),
                child: const Text('–û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  String _getInitials(String name) {
    final parts = name.split(' ');
    if (parts.length >= 2) {
      return '${parts[0][0]}${parts[1][0]}'.toUpperCase();
    } else if (name.isNotEmpty) {
      return name[0].toUpperCase();
    }
    return '';
  }

  String _formatDateTime(DateTime dateTime) {
    return '${dateTime.day}.${dateTime.month}.${dateTime.year} ${dateTime.hour.toString().padLeft(2, '0')}:${dateTime.minute.toString().padLeft(2, '0')}';
  }

  Future<void> _acceptInvitation(TeamInvitationModel invitation) async {
    try {
      final teamService = ref.read(teamServiceProvider);
      await teamService.acceptTeamInvitation(invitation.id);
      
      if (mounted) {
        ErrorHandler.teamJoined(context, invitation.teamName);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        await _loadInvitations();
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        ref.invalidate(currentUserProvider);
      }
    } catch (e) {
      if (mounted) {
        ErrorHandler.showError(context, e);
      }
    }
  }

  Future<void> _declineInvitation(TeamInvitationModel invitation) async {
    try {
      final teamService = ref.read(teamServiceProvider);
      await teamService.declineTeamInvitation(invitation.id);
      
      if (mounted) {
        ErrorHandler.rejected(context, '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        await _loadInvitations();
      }
    } catch (e) {
      if (mounted) {
        ErrorHandler.showError(context, e);
      }
    }
  }

  Future<void> _cancelInvitation(TeamInvitationModel invitation) async {
    try {
      final teamService = ref.read(teamServiceProvider);
      await teamService.cancelTeamInvitation(invitation.teamId, invitation.toUserId);
      
      if (mounted) {
        ErrorHandler.cancelled(context, '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π
        await _loadInvitations();
      }
    } catch (e) {
      if (mounted) {
        ErrorHandler.showError(context, e);
      }
    }
  }
} 