import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../../../../core/constants/constants.dart';
import '../../../auth/domain/entities/user_model.dart';
import '../../../auth/data/datasources/user_service.dart';
import '../../../rooms/domain/entities/room_model.dart';
import '../../../rooms/data/datasources/room_service.dart';
import '../../../teams/domain/entities/user_team_model.dart';
import '../../../teams/domain/entities/team_model.dart';
import '../../../notifications/data/datasources/game_notification_service.dart';
import 'team_service.dart';

/// –ú–æ–¥–µ–ª—å –∑–∞–ø–∏—Å–∏ –æ –ø–æ–±–µ–¥–µ –∫–æ–º–∞–Ω–¥—ã
class TeamVictoryModel {
  final String id;
  final String gameId;
  final String winnerTeamId;
  final String winnerTeamName;
  final List<String> winnerTeamMembers;
  final int pointsAwarded;
  final DateTime createdAt;
  final String organizerId;

  TeamVictoryModel({
    required this.id,
    required this.gameId,
    required this.winnerTeamId,
    required this.winnerTeamName,
    required this.winnerTeamMembers,
    required this.pointsAwarded,
    required this.createdAt,
    required this.organizerId,
  });

  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'gameId': gameId,
      'winnerTeamId': winnerTeamId,
      'winnerTeamName': winnerTeamName,
      'winnerTeamMembers': winnerTeamMembers,
      'pointsAwarded': pointsAwarded,
      'createdAt': Timestamp.fromDate(createdAt),
      'organizerId': organizerId,
    };
  }

  static TeamVictoryModel fromMap(Map<String, dynamic> map) {
    return TeamVictoryModel(
      id: map['id'] ?? '',
      gameId: map['gameId'] ?? '',
      winnerTeamId: map['winnerTeamId'] ?? '',
      winnerTeamName: map['winnerTeamName'] ?? '',
      winnerTeamMembers: List<String>.from(map['winnerTeamMembers'] ?? []),
      pointsAwarded: map['pointsAwarded'] ?? 0,
      createdAt: (map['createdAt'] as Timestamp).toDate(),
      organizerId: map['organizerId'] ?? '',
    );
  }
}

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–±–µ–¥–∞–º–∏ –∫–æ–º–∞–Ω–¥
class TeamVictoryService {
  static const String _collection = 'team_victories';
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final Uuid _uuid = const Uuid();
  final TeamService _teamService;
  final GameNotificationService _notificationService;

  TeamVictoryService(this._teamService, this._notificationService);

  /// –í—ã–±—Ä–∞—Ç—å –∫–æ–º–∞–Ω–¥—É-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏ –Ω–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã
  Future<void> declareTeamWinner({
    required String gameId,
    required String gameTitle,
    required DateTime gameDate,
    required String winnerTeamId,
    required UserModel organizer,
    int pointsForWin = 3,
  }) async {
    try {
      debugPrint('üèÜ –û–±—ä—è–≤–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã $gameId: –∫–æ–º–∞–Ω–¥–∞ $winnerTeamId');

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã
      final existingVictory = await _getGameVictory(gameId);
      if (existingVictory != null) {
        throw Exception('–ö–æ–º–∞–Ω–¥–∞-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–ª—è —ç—Ç–æ–π –∏–≥—Ä—ã —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ-–ø–æ–±–µ–¥–∏—Ç–µ–ª–µ –∏–∑ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –∏–≥—Ä—ã
      final winnerTeam = await _getGameTeamById(gameId, winnerTeamId);
      if (winnerTeam == null) {
        throw Exception('–ö–æ–º–∞–Ω–¥–∞-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∏–≥—Ä–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞
      final roomDoc = await _firestore.collection('rooms').doc(gameId).get();
      if (!roomDoc.exists) {
        throw Exception('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }
      final room = RoomModel.fromMap(roomDoc.data()!);

      final batch = _firestore.batch();
      final now = DateTime.now();

      // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ –ø–æ–±–µ–¥–µ
      final victory = TeamVictoryModel(
        id: _uuid.v4(),
        gameId: gameId,
        winnerTeamId: winnerTeamId,
        winnerTeamName: winnerTeam.name,
        winnerTeamMembers: winnerTeam.members,
        pointsAwarded: pointsForWin,
        createdAt: now,
        organizerId: organizer.id,
      );

      final victoryDoc = _firestore.collection(_collection).doc(victory.id);
      batch.set(victoryDoc, victory.toMap());

      // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –Ω–∞—Å—Ç–æ—è—â–µ–≥–æ –∫–æ–º–∞–Ω–¥–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
      if (room.gameMode.toString() == 'GameMode.team_friendly') {
        // –ö–æ–º–∞–Ω–¥–Ω—ã–π —Ä–µ–∂–∏–º: +1 –±–∞–ª–ª –∫–æ–º–∞–Ω–¥–µ
        await _awardPointsToWinnerTeam(winnerTeam, 1);
        debugPrint('üí∞ –ö–æ–º–∞–Ω–¥–µ –Ω–∞—á–∏—Å–ª–µ–Ω +1 –±–∞–ª–ª –∑–∞ –ø–æ–±–µ–¥—É');
      } else {
        debugPrint('‚ö†Ô∏è –û–±—ã—á–Ω—ã–π —Ä–µ–∂–∏–º - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥ –Ω–µ –æ–±–Ω–æ–≤–ª—è–µ—Ç—Å—è');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
      await batch.commit();

      debugPrint('‚úÖ –ü–æ–±–µ–¥–∞ –∫–æ–º–∞–Ω–¥—ã ${winnerTeam.name} –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–∞!');

      // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É wins/losses –∏–≥—Ä–æ–∫–æ–≤
      try {
        final roomService = RoomService();
        await roomService.updatePlayerStatsAfterTeamVictory(room, winnerTeamId);
        debugPrint('‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä–æ–∫–æ–≤');
      } catch (e) {
        debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: $e');
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      await _notifyTeamVictory(
        gameId: gameId,
        winnerTeamName: winnerTeam.name,
        winnerTeamMembers: winnerTeam.members,
        gameTitle: gameTitle,
        organizer: organizer,
        pointsAwarded: pointsForWin,
      );

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—ä—è–≤–ª–µ–Ω–∏–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–±–µ–¥–µ –≤ –∏–≥—Ä–µ
  Future<TeamVictoryModel?> _getGameVictory(String gameId) async {
    try {
      final snapshot = await _firestore
          .collection(_collection)
          .where('gameId', isEqualTo: gameId)
          .limit(1)
          .get();

      if (snapshot.docs.isEmpty) return null;

      return TeamVictoryModel.fromMap(snapshot.docs.first.data());
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–±–µ–¥–µ: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã, —É—á–∞—Å—Ç–≤–æ–≤–∞–≤—à–∏–µ –≤ –∏–≥—Ä–µ
  Future<List<UserTeamModel>> _getParticipatingTeams(String gameId) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ teams
      final snapshot = await _firestore
          .collection('teams')
          .where('roomId', isEqualTo: gameId)
          .get();

      final gameTeams = snapshot.docs
          .map((doc) => TeamModel.fromMap(doc.data()))
          .toList();

      // –ù–∞—Ö–æ–¥–∏–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      final userTeams = <UserTeamModel>[];
      for (final gameTeam in gameTeams) {
        if (gameTeam.members.isNotEmpty) {
          // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
          final firstMemberId = gameTeam.members.first;
          final userTeam = await _findUserTeamByMember(firstMemberId);
          if (userTeam != null) {
            userTeams.add(userTeam);
          }
        }
      }

      return userTeams;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —É—á–∞—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–º–∞–Ω–¥: $e');
      return [];
    }
  }

  /// –ù–∞–π—Ç–∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫—É
  Future<UserTeamModel?> _findUserTeamByMember(String memberId) async {
    try {
      final snapshot = await _firestore
          .collection(FirestorePaths.userTeamsCollection)
          .where('members', arrayContains: memberId)
          .limit(1)
          .get();

      if (snapshot.docs.isEmpty) return null;

      return UserTeamModel.fromMap(snapshot.docs.first.data());
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã —É—á–∞—Å—Ç–Ω–∏–∫–∞: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –∏–≥—Ä—ã –ø–æ ID
  Future<TeamModel?> _getGameTeamById(String gameId, String teamId) async {
    try {
      debugPrint('üîç –ò—â–µ–º –∫–æ–º–∞–Ω–¥—É gameId: $gameId, teamId: $teamId');
      
      final snapshot = await _firestore
          .collection('teams')
          .where('roomId', isEqualTo: gameId)
          .where('id', isEqualTo: teamId)
          .limit(1)
          .get();

      debugPrint('üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–º–∞–Ω–¥ –ø–æ –∑–∞–ø—Ä–æ—Å—É: ${snapshot.docs.length}');
      
      if (snapshot.docs.isEmpty) {
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ - –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã —ç—Ç–æ–π –∏–≥—Ä—ã
        final allTeamsSnapshot = await _firestore
            .collection('teams')
            .where('roomId', isEqualTo: gameId)
            .get();
            
        debugPrint('üîç –í—Å–µ–≥–æ –∫–æ–º–∞–Ω–¥ –≤ –∏–≥—Ä–µ $gameId: ${allTeamsSnapshot.docs.length}');
        for (final doc in allTeamsSnapshot.docs) {
          final team = TeamModel.fromMap(doc.data());
          debugPrint('üìã –ö–æ–º–∞–Ω–¥–∞: id=${team.id}, name=${team.name}, members=${team.members.length}');
        }
        
        return null;
      }

      final team = TeamModel.fromMap(snapshot.docs.first.data());
      debugPrint('‚úÖ –ù–∞–π–¥–µ–Ω–∞ –∫–æ–º–∞–Ω–¥–∞: ${team.name} —Å ${team.members.length} —É—á–∞—Å—Ç–Ω–∏–∫–∞–º–∏');
      return team;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –∏–≥—Ä—ã: $e');
      return null;
    }
  }

  /// –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã –∫–æ–º–∞–Ω–¥–µ-–ø–æ–±–µ–¥–∏—Ç–µ–ª—é
  Future<void> _awardPointsToWinnerTeam(TeamModel winnerTeam, int points) async {
    try {
      // –ù–∞—Ö–æ–¥–∏–º –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É –ø–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞–º
      for (final memberId in winnerTeam.members) {
        final userTeam = await _findUserTeamByMember(memberId);
        if (userTeam != null) {
          // –ù–∞—á–∏—Å–ª—è–µ–º –±–∞–ª–ª—ã –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥–µ
          await _firestore
              .collection(FirestorePaths.userTeamsCollection)
              .doc(userTeam.id)
              .update({
            'teamScore': FieldValue.increment(points),
            'gamesWon': FieldValue.increment(1),
            'gamesPlayed': FieldValue.increment(1),
            'updatedAt': Timestamp.now(),
          });
          
          debugPrint('üí∞ –ö–æ–º–∞–Ω–¥–µ ${userTeam.name} –Ω–∞—á–∏—Å–ª–µ–Ω–æ $points –±–∞–ª–ª–æ–≤ –∑–∞ –ø–æ–±–µ–¥—É');
          break; // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω —Ä–∞–∑
        }
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∏—Å–ª–µ–Ω–∏—è –±–∞–ª–ª–æ–≤ –∫–æ–º–∞–Ω–¥–µ-–ø–æ–±–µ–¥–∏—Ç–µ–ª—é: $e');
    }
  }

  /// –ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã –∫–æ–º–∞–Ω–¥–µ
  Future<void> _awardPointsToTeam({
    required WriteBatch batch,
    required String teamId,
    required int points,
    required bool isWin,
  }) async {
    final teamDoc = _firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId);
    
    final updates = <String, dynamic>{
      'teamScore': FieldValue.increment(points),
      'updatedAt': Timestamp.now(),
    };

    if (isWin) {
      updates['gamesWon'] = FieldValue.increment(1);
    }

    batch.update(teamDoc, updates);
    debugPrint('üí∞ –ö–æ–º–∞–Ω–¥–µ $teamId –Ω–∞—á–∏—Å–ª–µ–Ω–æ $points –±–∞–ª–ª–æ–≤');
  }

  /// –û–±–Ω–æ–≤–∏—Ç—å –∏–≥—Ä–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–∞–Ω–¥—ã
  Future<void> _updateTeamGameStats({
    required WriteBatch batch,
    required String teamId,
    required bool isWin,
  }) async {
    final teamDoc = _firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId);
    
    final updates = <String, dynamic>{
      'gamesPlayed': FieldValue.increment(1),
      'updatedAt': Timestamp.now(),
    };

    if (isWin) {
      updates['gamesWon'] = FieldValue.increment(1);
    }

    batch.update(teamDoc, updates);
    debugPrint('üìä –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–∞–Ω–¥—ã $teamId (–ø–æ–±–µ–¥–∞: $isWin)');
  }

  /// –û—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ –∫–æ–º–∞–Ω–¥—ã
  Future<void> _notifyTeamVictory({
    required String gameId,
    required String winnerTeamName,
    required List<String> winnerTeamMembers,
    required String gameTitle,
    required UserModel organizer,
    required int pointsAwarded,
  }) async {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–Ω–∞—Ç–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      final roomService = RoomService();
      final room = await roomService.getRoomById(gameId);
      
      if (room == null) {
        debugPrint('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–º–Ω–∞—Ç—É $gameId –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–±–µ–¥–µ');
        return;
      }

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –∫–æ–º–∞–Ω–¥—ã-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      await _notificationService.notifyTeamVictory(
        room: room,
        organizer: organizer,
        winnerTeamName: winnerTeamName,
        teamMembers: winnerTeamMembers,
      );

      debugPrint('üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø–æ–±–µ–¥–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã –∫–æ–º–∞–Ω–¥–µ $winnerTeamName');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ –ø–æ–±–µ–¥–µ: $e');
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏ –ø—Ä–∏—Å—É–¥–∏—Ç—å –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥–µ
  Future<void> _checkAndAwardAchievements(String teamId) async {
    try {
      final team = await _teamService.getUserTeamById(teamId);
      if (team == null) return;

      final achievements = <String>[];

      // –ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞
      if (team.gamesWon == 1 && !team.achievements.contains('first_win')) {
        achievements.add('first_win');
      }

      // –°–µ—Ä–∏–∏ –ø–æ–±–µ–¥
      final currentStreak = await _getCurrentWinningStreak(teamId);
      if (currentStreak >= 3 && !team.achievements.contains('winning_streak_3')) {
        achievements.add('winning_streak_3');
      }
      if (currentStreak >= 5 && !team.achievements.contains('winning_streak_5')) {
        achievements.add('winning_streak_5');
      }
      if (currentStreak >= 10 && !team.achievements.contains('winning_streak_10')) {
        achievements.add('winning_streak_10');
      }

      // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è
      if (achievements.isNotEmpty) {
        final updatedAchievements = [...team.achievements, ...achievements];
        await _firestore
            .collection(FirestorePaths.userTeamsCollection)
            .doc(teamId)
            .update({
          'achievements': updatedAchievements,
          'updatedAt': Timestamp.now(),
        });

        debugPrint('üèÖ –ö–æ–º–∞–Ω–¥–µ ${team.name} –ø—Ä–∏—Å—É–∂–¥–µ–Ω—ã –¥–æ—Å—Ç–∏–∂–µ–Ω–∏—è: ${achievements.join(", ")}');
      }
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–π: $e');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥—ã
  Future<int> _getCurrentWinningStreak(String teamId) async {
    try {
      final snapshot = await _firestore
          .collection(_collection)
          .where('winnerTeamId', isEqualTo: teamId)
          .orderBy('createdAt', descending: true)
          .limit(20) // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∏–≥—Ä
          .get();

      int streak = 0;
      for (final doc in snapshot.docs) {
        final victory = TeamVictoryModel.fromMap(doc.data());
        if (victory.winnerTeamId == teamId) {
          streak++;
        } else {
          break; // –°–µ—Ä–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞
        }
      }

      return streak;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥: $e');
      return 0;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –ø–æ–±–µ–¥ –∫–æ–º–∞–Ω–¥—ã
  Future<List<TeamVictoryModel>> getTeamVictories(String teamId, {int limit = 10}) async {
    try {
      final snapshot = await _firestore
          .collection(_collection)
          .where('winnerTeamId', isEqualTo: teamId)
          .orderBy('createdAt', descending: true)
          .limit(limit)
          .get();

      return snapshot.docs
          .map((doc) => TeamVictoryModel.fromMap(doc.data()))
          .toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –ø–æ–±–µ–¥: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∫–æ–º–∞–Ω–¥ –ø–æ –±–∞–ª–ª–∞–º
  Future<List<UserTeamModel>> getTopTeams({int limit = 10}) async {
    try {
      final snapshot = await _firestore
          .collection(FirestorePaths.userTeamsCollection)
          .orderBy('teamScore', descending: true)
          .limit(limit)
          .get();

      return snapshot.docs
          .map((doc) => UserTeamModel.fromMap(doc.data()))
          .toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∫–æ–º–∞–Ω–¥: $e');
      return [];
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –±—ã–ª–∞ –ª–∏ –≤—ã–±—Ä–∞–Ω–∞ –∫–æ–º–∞–Ω–¥–∞-–ø–æ–±–µ–¥–∏—Ç–µ–ª—å –¥–ª—è –∏–≥—Ä—ã
  Future<bool> hasGameWinner(String gameId) async {
    final victory = await _getGameVictory(gameId);
    return victory != null;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É-–ø–æ–±–µ–¥–∏—Ç–µ–ª—è –∏–≥—Ä—ã
  Future<TeamVictoryModel?> getGameWinner(String gameId) async {
    return await _getGameVictory(gameId);
  }
} 