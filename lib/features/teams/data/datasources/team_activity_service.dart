import 'package:flutter/foundation.dart';
import '../../../auth/domain/entities/user_model.dart';
import '../../../notifications/data/datasources/game_notification_service.dart';
import '../../../teams/domain/entities/team_activity_check_model.dart';
import 'team_service.dart';

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
class TeamActivityService {
  final TeamService _teamService;
  final GameNotificationService _notificationService;

  TeamActivityService(this._teamService, this._notificationService);

  /// –ó–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
  Future<String> startActivityCheck({
    required String teamId,
    required UserModel organizer,
  }) async {
    try {
      debugPrint('üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã $teamId –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º ${organizer.name}');

      // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
      final team = await _teamService.getUserTeamById(teamId);
      if (team == null) {
        throw Exception('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º –∫–æ–º–∞–Ω–¥—ã
      if (team.ownerId != organizer.id) {
        throw Exception('–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–º–∞–Ω–¥–µ –µ—Å—Ç—å –∏–≥—Ä–æ–∫–∏ –∫—Ä–æ–º–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
      final teamMembers = team.members.where((id) => id != organizer.id).toList();
      if (teamMembers.isEmpty) {
        throw Exception('–í –∫–æ–º–∞–Ω–¥–µ –Ω–µ—Ç –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
      }

      // –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
      final checkId = await _teamService.createActivityCheck(
        teamId: teamId,
        organizerId: organizer.id,
        organizerName: organizer.name,
        teamMembers: team.members,
      );

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¢–û–õ–¨–ö–û –∏–≥—Ä–æ–∫–∞–º –∫–æ–º–∞–Ω–¥—ã (–Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É)
      await _notificationService.notifyActivityCheck(
        teamId: teamId,
        teamName: team.name,
        teamMembers: teamMembers, // –¢–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–∏, –±–µ–∑ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
      );

      debugPrint('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ $checkId —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω–∞ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã "${team.name}"');
      return checkId;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: $e');
      rethrow;
    }
  }

  /// –ò–≥—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
  Future<void> confirmReadiness({
    required String checkId,
    required String playerId,
  }) async {
    try {
      debugPrint('‚úã –ò–≥—Ä–æ–∫ $playerId –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ $checkId');

      await _teamService.confirmPlayerReadiness(checkId, playerId);

      debugPrint('‚úÖ –ì–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –∏–≥—Ä–æ–∫–∞ $playerId –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: $e');
      rethrow;
    }
  }

  /// –ò–≥—Ä–æ–∫ –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
  Future<void> declineReadiness({
    required String checkId,
    required String playerId,
  }) async {
    try {
      debugPrint('‚ùå –ò–≥—Ä–æ–∫ $playerId –æ—Ç–∫–ª–æ–Ω—è–µ—Ç –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ $checkId');

      await _teamService.declinePlayerReadiness(checkId, playerId);

      debugPrint('‚úÖ –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞ $playerId –∑–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–æ');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
  Future<TeamActivityCheckModel?> getActiveCheck(String teamId) async {
    try {
      return await _teamService.getActiveActivityCheck(teamId);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ ID
  Future<TeamActivityCheckModel?> getCheckById(String checkId) async {
    try {
      return await _teamService.getActivityCheckById(checkId);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞
  Future<List<TeamActivityCheckModel>> getPlayerChecks(String playerId) async {
    try {
      return await _teamService.getPlayerActivityChecks(playerId);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –¥–ª—è –∏–≥—Ä–æ–∫–∞: $e');
      return [];
    }
  }

  /// Stream –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –∏–≥—Ä–æ–∫–∞
  Stream<List<TeamActivityCheckModel>> watchPlayerChecks(String playerId) {
    return _teamService.watchPlayerActivityChecks(playerId);
  }

  /// Stream –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  Stream<TeamActivityCheckModel?> watchCheck(String checkId) {
    return _teamService.watchActivityCheck(checkId);
  }

  /// –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä)
  Future<void> cancelCheck({
    required String checkId,
    required String organizerId,
  }) async {
    try {
      debugPrint('üö´ –û—Ç–º–µ–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ $checkId –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º $organizerId');

      await _teamService.cancelActivityCheck(checkId, organizerId);

      debugPrint('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ $checkId –æ—Ç–º–µ–Ω–µ–Ω–∞');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: $e');
      rethrow;
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤—Å–µ –ª–∏ –∏–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã –≥–æ—Ç–æ–≤—ã
  Future<bool> areAllPlayersReady(String checkId) async {
    try {
      final check = await getCheckById(checkId);
      return check?.areAllPlayersReady ?? false;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
  Future<Map<String, dynamic>> getReadinessStats(String checkId) async {
    try {
      final check = await getCheckById(checkId);
      if (check == null) {
        return {
          'total': 0,
          'ready': 0,
          'notResponded': 0,
          'percentage': 0.0,
          'allReady': false,
          'isExpired': true,
        };
      }

      return {
        'total': check.teamMembers.length,
        'ready': check.readyPlayers.length,
        'notResponded': check.notRespondedCount,
        'percentage': check.readinessPercentage,
        'allReady': check.areAllPlayersReady,
        'isExpired': check.isExpired,
        'timeLeft': check.isExpired ? 0 : check.expiresAt.difference(DateTime.now()).inMinutes,
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏: $e');
      return {
        'total': 0,
        'ready': 0,
        'notResponded': 0,
        'percentage': 0.0,
        'allReady': false,
        'isExpired': true,
      };
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  Future<void> cleanupOldChecks() async {
    try {
      await _teamService.cleanupOldActivityChecks();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫: $e');
    }
  }
} 