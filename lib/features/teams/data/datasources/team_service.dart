import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:uuid/uuid.dart';
import '../../../../core/constants/constants.dart';
import '../../../auth/domain/entities/user_model.dart';
import '../../../rooms/domain/entities/room_model.dart';
import '../../../teams/domain/entities/team_model.dart';
import '../../../teams/domain/entities/user_team_model.dart';
import '../../../teams/domain/entities/team_invitation_model.dart';
import '../../../teams/domain/entities/team_application_model.dart';
import '../../../teams/domain/entities/team_activity_check_model.dart';
import 'package:flutter/foundation.dart';
import '../../../../core/utils/game_time_utils.dart';

class TeamService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final Uuid _uuid = const Uuid();

  // –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã
  Future<List<TeamModel>> getTeamsForRoom(String roomId) async {
    final snapshot = await _firestore
        .collection('teams')
        .where('roomId', isEqualTo: roomId)
        .get();
    
    final teams = snapshot.docs
        .map((doc) => TeamModel.fromMap(doc.data()))
        .toList();
    
    teams.sort((a, b) => a.name.compareTo(b.name));
    return teams;
  }

  // Stream –¥–ª—è –∫–æ–º–∞–Ω–¥ –∫–æ–º–Ω–∞—Ç—ã
  Stream<List<TeamModel>> watchTeamsForRoom(String roomId) {
    return _firestore
        .collection('teams')
        .where('roomId', isEqualTo: roomId)
        .snapshots()
        .map((snapshot) {
          final teams = snapshot.docs
              .map((doc) => TeamModel.fromMap(doc.data()))
              .toList();
          
          teams.sort((a, b) => a.name.compareTo(b.name));
          return teams;
        });
  }

  // –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ
  Future<void> joinTeam(String teamId, String userId) async {
    final teamDoc = await _firestore.collection('teams').doc(teamId).get();
    if (!teamDoc.exists) {
      throw Exception('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final team = TeamModel.fromMap(teamDoc.data()!);
    
    if (team.isFull) {
      throw Exception('–ö–æ–º–∞–Ω–¥–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
    }

    if (team.members.contains(userId)) {
      throw Exception('–í—ã —É–∂–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }

    final roomDoc = await _firestore.collection('rooms').doc(team.roomId).get();
    if (!roomDoc.exists) {
      throw Exception('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final room = RoomModel.fromMap(roomDoc.data()!);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º GameTimeUtils –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
    if (!GameTimeUtils.canJoinGame(room)) {
      throw Exception('–ù–µ–ª—å–∑—è –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–∞–Ω–¥–µ: –∏–≥—Ä–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–∞—á–∞–ª–∞—Å—å');
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
    final now = DateTime.now();
    final joinCutoffTime = room.startTime.subtract(const Duration(minutes: 5));
    if (now.isAfter(joinCutoffTime)) {
      throw Exception('–ü—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –∫ –∫–æ–º–∞–Ω–¥–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
    }

    final batch = _firestore.batch();

    // –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã
    final teamUpdateData = {
      'members': FieldValue.arrayUnion([userId]),
      'updatedAt': Timestamp.now(),
    };

    // –ï—Å–ª–∏ —É –∫–æ–º–∞–Ω–¥—ã –Ω–µ—Ç –∫–∞–ø–∏—Ç–∞–Ω–∞ –∏ –æ–Ω–∞ –ø—É—Å—Ç–∞—è, –¥–µ–ª–∞–µ–º –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–≤—à–µ–≥–æ—Å—è –∫–∞–ø–∏—Ç–∞–Ω–æ–º
    if (team.captainId == null && team.members.isEmpty) {
      teamUpdateData['captainId'] = userId;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–º–∞–Ω–¥—É
    batch.update(_firestore.collection('teams').doc(teamId), teamUpdateData);

    // –î–æ–±–∞–≤–ª—è–µ–º –≤ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –∫–æ–º–Ω–∞—Ç—ã
    if (!room.participants.contains(userId)) {
      batch.update(_firestore.collection('rooms').doc(team.roomId), {
        'participants': FieldValue.arrayUnion([userId]),
        'updatedAt': Timestamp.now(),
      });
    }

    await batch.commit();
  }

  // –í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
  Future<void> leaveTeam(String teamId, String userId) async {
    final teamDoc = await _firestore.collection('teams').doc(teamId).get();
    if (!teamDoc.exists) {
      throw Exception('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final team = TeamModel.fromMap(teamDoc.data()!);
    
    if (!team.members.contains(userId)) {
      throw Exception('–í—ã –Ω–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }

    final roomDoc = await _firestore.collection('rooms').doc(team.roomId).get();
    if (!roomDoc.exists) {
      throw Exception('–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final room = RoomModel.fromMap(roomDoc.data()!);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –∏–≥—Ä—ã (–∏—Å–ø–æ–ª—å–∑—É–µ–º GameTimeUtils –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏)
    if (!GameTimeUtils.canLeaveGame(room)) {
      throw Exception('–ù–µ–ª—å–∑—è –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É: –∏–≥—Ä–∞ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–∞ –∏–ª–∏ –Ω–∞—á–∞–ª–∞—Å—å');
    }

    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –≤—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è
    final now = DateTime.now();
    final leaveCutoffTime = room.startTime.subtract(const Duration(minutes: 5));
    if (now.isAfter(leaveCutoffTime)) {
      throw Exception('–í—ã—Ö–æ–¥ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –∑–∞ 5 –º–∏–Ω—É—Ç –¥–æ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã');
    }

    // –í –æ–±—ã—á–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É
    // –í –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –º–∞—Ç—á (–Ω–æ –Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã)
    if (room.organizerId == userId && !room.isTeamMode) {
      throw Exception('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É');
    }
    
    // –í –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –º–∞—Ç—á
    if (room.isTeamMode && room.organizerId == userId) {
      throw Exception('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∏–≥—Ä—ã –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥–Ω—ã–π –º–∞—Ç—á');
    }

    final batch = _firestore.batch();

    // –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê: –í –∫–æ–º–∞–Ω–¥–Ω–æ–º —Ä–µ–∂–∏–º–µ, –µ—Å–ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∏–¥–∞–µ—Ç –º–∞—Ç—á,
    // —Ç–æ –≤—Å—è –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –ø–æ–∫–∏–Ω—É—Ç—å –º–∞—Ç—á
    if (room.isTeamMode && team.ownerId == userId) {
      debugPrint('üö® –û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –∫–æ–º–∞–Ω–¥—ã –ø–æ–∫–∏–¥–∞–µ—Ç –∫–æ–º–∞–Ω–¥–Ω—ã–π –º–∞—Ç—á - —É–¥–∞–ª—è–µ–º –≤—Å—é –∫–æ–º–∞–Ω–¥—É');
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
      batch.update(_firestore.collection('rooms').doc(team.roomId), {
        'participants': FieldValue.arrayRemove(team.members),
        'updatedAt': Timestamp.now(),
      });
      
      // –û—á–∏—â–∞–µ–º –∫–æ–º–∞–Ω–¥—É –ø–æ–ª–Ω–æ—Å—Ç—å—é
      batch.update(_firestore.collection('teams').doc(teamId), {
        'members': [],
        'ownerId': null,
        'updatedAt': Timestamp.now(),
      });
      
      debugPrint('‚úÖ –í—Å—è –∫–æ–º–∞–Ω–¥–∞ "${team.name}" (${team.members.length} –∏–≥—Ä–æ–∫–æ–≤) –ø–æ–∫–∏–Ω—É–ª–∞ –º–∞—Ç—á –≤–º–µ—Å—Ç–µ —Å –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º');
    } else {
      // –û–±—ã—á–Ω–∞—è –ª–æ–≥–∏–∫–∞ - —É–¥–∞–ª—è–µ–º —Ç–æ–ª—å–∫–æ –æ–¥–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      batch.update(_firestore.collection('teams').doc(teamId), {
        'members': FieldValue.arrayRemove([userId]),
        'updatedAt': Timestamp.now(),
      });

      batch.update(_firestore.collection('rooms').doc(team.roomId), {
        'participants': FieldValue.arrayRemove([userId]),
        'updatedAt': Timestamp.now(),
      });
    }

    await batch.commit();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –∫–æ–º–Ω–∞—Ç–µ
  Future<TeamModel?> getUserTeamInRoom(String userId, String roomId) async {
    final snapshot = await _firestore
        .collection('teams')
        .where('roomId', isEqualTo: roomId)
        .where('members', arrayContains: userId)
        .limit(1)
        .get();
    
    if (snapshot.docs.isEmpty) return null;
    
    return TeamModel.fromMap(snapshot.docs.first.data());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ ID
  Future<TeamModel?> getTeamById(String teamId) async {
    final doc = await _firestore.collection('teams').doc(teamId).get();
    return doc.exists ? TeamModel.fromMap(doc.data()!) : null;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ ID
  Future<UserTeamModel?> getUserTeamById(String teamId) async {
    final doc = await _firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId).get();
    return doc.exists ? UserTeamModel.fromMap(doc.data()!) : null;
  }

  // –†–ê–ë–û–¢–ê –° –ü–û–°–¢–û–Ø–ù–ù–´–ú–ò –ö–û–ú–ê–ù–î–ê–ú–ò

  // –°–æ–∑–¥–∞—Ç—å –ø–æ—Å—Ç–æ—è–Ω–Ω—É—é –∫–æ–º–∞–Ω–¥—É (—Ç–æ–ª—å–∫–æ –æ–¥–Ω—É –Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞)
  Future<String> createUserTeam(UserTeamModel team) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∫–æ–º–∞–Ω–¥—ã —É —ç—Ç–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
    final existingTeam = await getUserTeam(team.ownerId);
    if (existingTeam != null) {
      throw Exception('–£ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–Ω–∞ –∫–æ–º–∞–Ω–¥–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –≤ —á—É–∂–æ–π –∫–æ–º–∞–Ω–¥–µ
    final organizer = await _getUserById(team.ownerId);
    if (organizer != null && organizer.teamId != null) {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –æ–Ω –≤–ª–∞–¥–µ–ª—å—Ü–µ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
      final currentTeam = await getUserTeamById(organizer.teamId!);
      if (currentTeam != null && currentTeam.ownerId != team.ownerId) {
        throw Exception('–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å —Å–≤–æ—é –∫–æ–º–∞–Ω–¥—É, –Ω–∞—Ö–æ–¥—è—Å—å –≤ –¥—Ä—É–≥–æ–π');
      }
    }

    final String teamId = _uuid.v4();
    final teamWithId = team.copyWith();
    
    final teamData = teamWithId.toMap();
    teamData['id'] = teamId;
    
    await _firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId).set(teamData);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ —É —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    await _updateTeamInfoForMembers(teamId, team.name, team.members, team.ownerId);
    
    return teamId;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UserTeamModel?> getUserTeam(String ownerId) async {
    final snapshot = await _firestore
        .collection(FirestorePaths.userTeamsCollection)
        .where('ownerId', isEqualTo: ownerId)
        .limit(1)
        .get();
    
    if (snapshot.docs.isEmpty) return null;
    
    return UserTeamModel.fromMap(snapshot.docs.first.data());
  }

  // –û–±–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É
  Future<void> updateUserTeam(String teamId, Map<String, dynamic> updates) async {
    updates['updatedAt'] = Timestamp.now();
    await _firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId).update(updates);
    
    if (updates.containsKey('members') || updates.containsKey('name')) {
      final teamDoc = await _firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId).get();
      if (teamDoc.exists) {
        final updatedTeam = UserTeamModel.fromMap(teamDoc.data()!);
        await _updateTeamInfoForMembers(teamId, updatedTeam.name, updatedTeam.members, updatedTeam.ownerId);
      }
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∫–æ–º–∞–Ω–¥—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<void> deleteUserTeam(String teamId) async {
    final teamDoc = await _firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId).get();
    if (!teamDoc.exists) {
      throw Exception('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final team = UserTeamModel.fromMap(teamDoc.data()!);
    
    final batch = _firestore.batch();

    // –£–¥–∞–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    batch.delete(_firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId));

    // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ —É –≤—Å–µ—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤
    for (final memberId in team.members) {
      batch.update(_firestore.collection(FirestorePaths.usersCollection).doc(memberId), {
        'teamId': null,
        'teamName': null,
        'isTeamCaptain': false,
        'updatedAt': Timestamp.now(),
      });
    }

    await batch.commit();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (—É–ø—Ä–æ—â–µ–Ω–Ω–æ)
  Future<Map<String, String?>> getUserTeamInfo(String userId) async {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –∫–æ–º–∞–Ω–¥—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º
      final ownerSnapshot = await _firestore
          .collection(FirestorePaths.userTeamsCollection)
          .where('ownerId', isEqualTo: userId)
          .limit(1)
          .get();
      
      if (ownerSnapshot.docs.isNotEmpty) {
        final team = UserTeamModel.fromMap(ownerSnapshot.docs.first.data());
        return {'name': team.name, 'id': team.id};
      }
      
      // –ï—Å–ª–∏ –Ω–µ –≤–ª–∞–¥–µ–ª–µ—Ü, –∏—â–µ–º –∫–æ–º–∞–Ω–¥—É, –≥–¥–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è —É—á–∞—Å—Ç–Ω–∏–∫–æ–º
      final memberSnapshot = await _firestore
          .collection(FirestorePaths.userTeamsCollection)
          .where('members', arrayContains: userId)
          .limit(1)
          .get();
      
      if (memberSnapshot.docs.isNotEmpty) {
        final team = UserTeamModel.fromMap(memberSnapshot.docs.first.data());
        return {'name': team.name, 'id': team.id};
      }
      
      return {'name': null, 'id': null};
    } catch (e) {
      return {'name': null, 'id': null};
    }
  }

  // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–æ–º–∞–Ω–¥–µ –≤ –ø—Ä–æ—Ñ–∏–ª—è—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
  Future<void> _updateTeamInfoForMembers(String teamId, String teamName, List<String> members, String ownerId) async {
    final batch = _firestore.batch();
    
    for (final memberId in members) {
      final userRef = _firestore.collection(FirestorePaths.usersCollection).doc(memberId);
      batch.update(userRef, {
        'teamId': teamId,
        'teamName': teamName,
        'isTeamCaptain': memberId == ownerId,
        'updatedAt': Timestamp.now(),
      });
    }
    
    await batch.commit();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
  Future<List<UserTeamModel>> getTeamsByOrganizer(String organizerId) async {
    final snapshot = await _firestore
        .collection(FirestorePaths.userTeamsCollection)
        .where('ownerId', isEqualTo: organizerId)
        .get();
    
    return snapshot.docs
        .map((doc) => UserTeamModel.fromMap(doc.data()))
        .toList();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
  Future<List<UserTeamModel>> getAllUserTeams() async {
    final snapshot = await _firestore
        .collection(FirestorePaths.userTeamsCollection)
        .orderBy('createdAt', descending: true)
        .get();
    
    return snapshot.docs
        .map((doc) => UserTeamModel.fromMap(doc.data()))
        .toList();
  }

  // –ú–ï–¢–û–î–´ –î–õ–Ø –ü–†–ò–ì–õ–ê–®–ï–ù–ò–ô –í –ö–û–ú–ê–ù–î–´

  // –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
  Future<void> sendTeamInvitation({
    required String teamId,
    required String fromUserId,
    required String toUserId,
    String? replacedUserId, // ID –∏–≥—Ä–æ–∫–∞, –∫–æ—Ç–æ—Ä–æ–≥–æ –∑–∞–º–µ–Ω—è—é—Ç
  }) async {
    if (fromUserId == toUserId) {
      throw Exception('–ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å —Å–∞–º–æ–≥–æ —Å–µ–±—è');
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
    final teamDoc = await _firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId).get();
    if (!teamDoc.exists) {
      throw Exception('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final team = UserTeamModel.fromMap(teamDoc.data()!);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å - –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–∞–Ω–¥—ã
    if (team.ownerId != fromUserId) {
      throw Exception('–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–∏–≥–ª–∞—à–∞–µ–º—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ –∫–æ–º–∞–Ω–¥–µ
    if (team.members.contains(toUserId)) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥–µ');
    }

    // –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    final fromUser = await _getUserById(fromUserId);
    final toUser = await _getUserById(toUserId);
    
    if (fromUser == null) {
      throw Exception('–û—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }
    
    if (toUser == null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –¥—Ä—É–∑—å—è
    if (!fromUser.friends.contains(toUserId)) {
      throw Exception('–ú–æ–∂–Ω–æ –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥—Ä—É–∑–µ–π');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É –ø—Ä–∏–≥–ª–∞—à–∞–µ–º–æ–≥–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã (–µ—Å–ª–∏ –Ω–µ –∑–∞–º–µ–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞)
    if (replacedUserId == null && toUser.teamId != null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    final existingInvitation = await _firestore
        .collection(FirestorePaths.teamInvitationsCollection)
        .where('teamId', isEqualTo: teamId)
        .where('toUserId', isEqualTo: toUserId)
        .where('status', isEqualTo: 'pending')
        .get();

    if (existingInvitation.docs.isNotEmpty) {
      throw Exception('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ');
    }

    String? replacedUserName;
    if (replacedUserId != null) {
      final replacedUser = await _getUserById(replacedUserId);
      replacedUserName = replacedUser?.name;
    }

    // –°–æ–∑–¥–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ
    final invitation = TeamInvitationModel(
      id: '',
      teamId: teamId,
      teamName: team.name,
      fromUserId: fromUserId,
      toUserId: toUserId,
      fromUserName: fromUser.name,
      toUserName: toUser.name,
      fromUserPhotoUrl: fromUser.photoUrl,
      toUserPhotoUrl: toUser.photoUrl,
      status: TeamInvitationStatus.pending,
      createdAt: DateTime.now(),
      replacedUserId: replacedUserId,
      replacedUserName: replacedUserName,
    );

    await _firestore.collection(FirestorePaths.teamInvitationsCollection).add(invitation.toMap());
  }

  // –ü—Ä–∏–Ω—è—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
  Future<void> acceptTeamInvitation(String invitationId) async {
    final invitationDoc = await _firestore.collection(FirestorePaths.teamInvitationsCollection).doc(invitationId).get();
    if (!invitationDoc.exists) {
      throw Exception('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
    }

    final invitation = TeamInvitationModel.fromMap(invitationDoc.data()!, invitationId);
    
    if (invitation.status != TeamInvitationStatus.pending) {
      throw Exception('–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ');
    }

    final batch = _firestore.batch();

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è
    batch.update(_firestore.collection(FirestorePaths.teamInvitationsCollection).doc(invitationId), {
      'status': 'accepted',
      'respondedAt': Timestamp.now(),
    });

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    final teamDoc = await _firestore.collection(FirestorePaths.userTeamsCollection).doc(invitation.teamId).get();
    if (!teamDoc.exists) {
      throw Exception('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final team = UserTeamModel.fromMap(teamDoc.data()!);
    List<String> newMembers = List.from(team.members);

    // –ï—Å–ª–∏ –∑–∞–º–µ–Ω—è–µ–º –∏–≥—Ä–æ–∫–∞, —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏–∑ –∫–æ–º–∞–Ω–¥—ã –∏ —Å–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
    if (invitation.replacedUserId != null) {
      newMembers.remove(invitation.replacedUserId);
      
      // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ —É –∑–∞–º–µ–Ω—è–µ–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      batch.update(_firestore.collection(FirestorePaths.usersCollection).doc(invitation.replacedUserId!), {
        'teamId': null,
        'teamName': null,
        'isTeamCaptain': false,
        'updatedAt': Timestamp.now(),
      });
      
      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è –∑–∞–º–µ–Ω—è–µ–º–æ–≥–æ –∏–≥—Ä–æ–∫–∞
      final teamExclusionNotification = {
        'id': '',
        'toUserId': invitation.replacedUserId!,
        'type': 'team_exclusion',
        'title': '–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –∏–∑ –∫–æ–º–∞–Ω–¥—ã',
        'message': '–í—ã –±—ã–ª–∏ –∏—Å–∫–ª—é—á–µ–Ω—ã –∏–∑ –∫–æ–º–∞–Ω–¥—ã "${invitation.teamName}" –∏ –∑–∞–º–µ–Ω–µ–Ω—ã –∏–≥—Ä–æ–∫–æ–º ${invitation.toUserName}',
        'teamId': invitation.teamId,
        'teamName': invitation.teamName,
        'replacedByUserId': invitation.toUserId,
        'replacedByUserName': invitation.toUserName,
        'isRead': false,
        'createdAt': Timestamp.now(),
      };
      
      // –î–æ–±–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏—é notifications
      batch.set(
        _firestore.collection('notifications').doc(),
        teamExclusionNotification,
      );
      
      debugPrint('üì¢ –°–æ–∑–¥–∞–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞ ${invitation.replacedUserId} –∏–∑ –∫–æ–º–∞–Ω–¥—ã ${invitation.teamName}');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    if (!newMembers.contains(invitation.toUserId)) {
      newMembers.add(invitation.toUserId);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
    batch.update(_firestore.collection(FirestorePaths.userTeamsCollection).doc(invitation.teamId), {
      'members': newMembers,
      'updatedAt': Timestamp.now(),
    });

    // –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ —É –Ω–æ–≤–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    batch.update(_firestore.collection(FirestorePaths.usersCollection).doc(invitation.toUserId), {
      'teamId': invitation.teamId,
      'teamName': invitation.teamName,
      'isTeamCaptain': false,
      'updatedAt': Timestamp.now(),
    });

    await batch.commit();
  }

  // –û—Ç–∫–ª–æ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
  Future<void> declineTeamInvitation(String invitationId) async {
    await _firestore.collection(FirestorePaths.teamInvitationsCollection).doc(invitationId).update({
      'status': 'declined',
      'respondedAt': Timestamp.now(),
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã
  Future<List<TeamInvitationModel>> getIncomingTeamInvitations(String userId) async {
    final snapshot = await _firestore
        .collection(FirestorePaths.teamInvitationsCollection)
        .where('toUserId', isEqualTo: userId)
        .where('status', isEqualTo: 'pending')
        .orderBy('createdAt', descending: true)
        .get();

    return snapshot.docs
        .map((doc) => TeamInvitationModel.fromMap(doc.data(), doc.id))
        .toList();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã
  Future<List<TeamInvitationModel>> getOutgoingTeamInvitations(String userId) async {
    final snapshot = await _firestore
        .collection(FirestorePaths.teamInvitationsCollection)
        .where('fromUserId', isEqualTo: userId)
        .where('status', isEqualTo: 'pending')
        .orderBy('createdAt', descending: true)
        .get();

    return snapshot.docs
        .map((doc) => TeamInvitationModel.fromMap(doc.data(), doc.id))
        .toList();
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥—è—â–∏—Ö –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –≤ –∫–æ–º–∞–Ω–¥—ã
  Future<int> getIncomingTeamInvitationsCount(String userId) async {
    final snapshot = await _firestore
        .collection(FirestorePaths.teamInvitationsCollection)
        .where('toUserId', isEqualTo: userId)
        .where('status', isEqualTo: 'pending')
        .get();

    return snapshot.docs.length;
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
  Future<void> cancelTeamInvitation(String teamId, String toUserId) async {
    final snapshot = await _firestore
        .collection(FirestorePaths.teamInvitationsCollection)
        .where('teamId', isEqualTo: teamId)
        .where('toUserId', isEqualTo: toUserId)
        .where('status', isEqualTo: 'pending')
        .get();

    for (final doc in snapshot.docs) {
      await doc.reference.delete();
    }
  }

  // –£–¥–∞–ª–∏—Ç—å –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
  Future<void> removePlayerFromTeam(String teamId, String playerId, String ownerId) async {
    final teamDoc = await _firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId).get();
    if (!teamDoc.exists) {
      throw Exception('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final team = UserTeamModel.fromMap(teamDoc.data()!);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞
    if (team.ownerId != ownerId) {
      throw Exception('–¢–æ–ª—å–∫–æ –≤–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–∞–Ω–¥—ã –º–æ–∂–µ—Ç —É–¥–∞–ª—è—Ç—å –∏–≥—Ä–æ–∫–æ–≤');
    }

    if (playerId == ownerId) {
      throw Exception('–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç —É–¥–∞–ª–∏—Ç—å —Å–µ–±—è');
    }

    if (!team.members.contains(playerId)) {
      throw Exception('–ò–≥—Ä–æ–∫ –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ');
    }

    final batch = _firestore.batch();

    // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    final newMembers = team.members.where((id) => id != playerId).toList();
    batch.update(_firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId), {
      'members': newMembers,
      'updatedAt': Timestamp.now(),
    });

    // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ —É –∏–≥—Ä–æ–∫–∞
    batch.update(_firestore.collection(FirestorePaths.usersCollection).doc(playerId), {
      'teamId': null,
      'teamName': null,
      'isTeamCaptain': false,
      'updatedAt': Timestamp.now(),
    });

    await batch.commit();
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  Future<UserModel?> _getUserById(String userId) async {
    final doc = await _firestore.collection(FirestorePaths.usersCollection).doc(userId).get();
    return doc.exists ? UserModel.fromMap(doc.data()!) : null;
  }

  // –†–ê–ë–û–¢–ê –° –ó–ê–Ø–í–ö–ê–ú–ò –í –ö–û–ú–ê–ù–î–´

  // –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤ –∫–æ–º–∞–Ω–¥—É
  Future<void> sendTeamApplication(String teamId, String fromUserId, {String? message}) async {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    final fromUser = await _getUserById(fromUserId);
    if (fromUser == null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –æ–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏
    if (fromUser.role == UserRole.user) {
      throw Exception('–û–±—ã—á–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –º–æ–≥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∏ –≤ –∫–æ–º–∞–Ω–¥—ã. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä—É —Å–≤–æ–µ–π –∫–æ–º–∞–Ω–¥—ã.');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ
    final teamDoc = await _firestore.collection(FirestorePaths.userTeamsCollection).doc(teamId).get();
    if (!teamDoc.exists) {
      throw Exception('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final team = UserTeamModel.fromMap(teamDoc.data()!);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –Ω–µ –ø–æ–ª–Ω–∞—è
    if (team.isFull) {
      throw Exception('–ö–æ–º–∞–Ω–¥–∞ —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–æ–º–∞–Ω–¥–µ
    if (fromUser.teamId != null) {
      throw Exception('–í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –∑–∞—è–≤–∫–∏
    final existingApplication = await _firestore
        .collection(FirestorePaths.teamApplicationsCollection)
        .where('teamId', isEqualTo: teamId)
        .where('fromUserId', isEqualTo: fromUserId)
        .where('status', isEqualTo: 'pending')
        .get();

    if (existingApplication.docs.isNotEmpty) {
      throw Exception('–í—ã —É–∂–µ –ø–æ–¥–∞–ª–∏ –∑–∞—è–≤–∫—É –≤ —ç—Ç—É –∫–æ–º–∞–Ω–¥—É');
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≤–ª–∞–¥–µ–ª—å—Ü–µ –∫–æ–º–∞–Ω–¥—ã
    final teamOwner = await _getUserById(team.ownerId);
    if (teamOwner == null) {
      throw Exception('–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–∞–Ω–¥—ã –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    // –°–æ–∑–¥–∞–µ–º –∑–∞—è–≤–∫—É
    final application = TeamApplicationModel(
      id: '',
      teamId: teamId,
      teamName: team.name,
      fromUserId: fromUserId,
      fromUserName: fromUser.name,
      toUserId: team.ownerId,
      status: 'pending',
      message: message,
      createdAt: DateTime.now(),
    );

    await _firestore.collection(FirestorePaths.teamApplicationsCollection).add(application.toFirestore());
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏ –≤ –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  Future<List<TeamApplicationModel>> getOutgoingTeamApplications(String userId) async {
    final snapshot = await _firestore
        .collection(FirestorePaths.teamApplicationsCollection)
        .where('fromUserId', isEqualTo: userId)
        .where('status', isEqualTo: 'pending')
        .orderBy('createdAt', descending: true)
        .get();

    return snapshot.docs
        .map((doc) => TeamApplicationModel.fromFirestore(doc))
        .toList();
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞—è–≤–∫—É –≤ –∫–æ–º–∞–Ω–¥—É
  Future<void> cancelTeamApplication(String teamId, String fromUserId) async {
    final snapshot = await _firestore
        .collection(FirestorePaths.teamApplicationsCollection)
        .where('teamId', isEqualTo: teamId)
        .where('fromUserId', isEqualTo: fromUserId)
        .where('status', isEqualTo: 'pending')
        .get();

    for (final doc in snapshot.docs) {
      await doc.reference.delete();
    }
  }

  // –í—ã–π—Ç–∏ –∏–∑ –∫–æ–º–∞–Ω–¥—ã (–¥–ª—è –æ–±—ã—á–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
  Future<void> leaveUserTeam(String userId) async {
    debugPrint('üö™ –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–∫–∏–¥–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');
    
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    final user = await _getUserById(userId);
    if (user == null) {
      throw Exception('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
    }

    if (user.teamId == null) {
      throw Exception('–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–æ–º–∞–Ω–¥–µ');
    }

    debugPrint('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω: ${user.name}, teamId: ${user.teamId}, teamName: ${user.teamName}');

    // –ü–æ–ª—É—á–∞–µ–º –∫–æ–º–∞–Ω–¥—É
    final teamDoc = await _firestore.collection(FirestorePaths.userTeamsCollection).doc(user.teamId!).get();
    if (!teamDoc.exists) {
      throw Exception('–ö–æ–º–∞–Ω–¥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final team = UserTeamModel.fromMap(teamDoc.data()!);
    
    debugPrint('üèÜ –ö–æ–º–∞–Ω–¥–∞ –Ω–∞–π–¥–µ–Ω–∞: ${team.name}, —É—á–∞—Å—Ç–Ω–∏–∫–∏: ${team.members}');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∫–æ–º–∞–Ω–¥—ã
    if (team.ownerId == userId) {
      throw Exception('–í–ª–∞–¥–µ–ª–µ—Ü –∫–æ–º–∞–Ω–¥—ã –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–∞–Ω–¥—É. –£–¥–∞–ª–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –ø–µ—Ä–µ–¥–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –¥—Ä—É–≥–æ–º—É –∏–≥—Ä–æ–∫—É.');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –≤ –∫–æ–º–∞–Ω–¥–µ
    if (!team.members.contains(userId)) {
      throw Exception('–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ');
    }

    final batch = _firestore.batch();

    // –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–º–∞–Ω–¥—ã
    final newMembers = team.members.where((id) => id != userId).toList();
    batch.update(_firestore.collection(FirestorePaths.userTeamsCollection).doc(user.teamId!), {
      'members': newMembers,
      'updatedAt': Timestamp.now(),
    });

    debugPrint('üìù –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É, –Ω–æ–≤—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏: $newMembers');

    // –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    batch.update(_firestore.collection(FirestorePaths.usersCollection).doc(userId), {
      'teamId': null,
      'teamName': null,
      'isTeamCaptain': false,
      'updatedAt': Timestamp.now(),
    });

    debugPrint('üóëÔ∏è –£–¥–∞–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–∞–Ω–¥–µ –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');

    await batch.commit();
    
    debugPrint('‚úÖ –ë–∞—Ç—á-–æ–ø–µ—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ');
    
    // –ñ–¥–µ–º –Ω–µ–±–æ–ª—å—à—É—é –∑–∞–¥–µ—Ä–∂–∫—É –¥–ª—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ Firebase
    await Future.delayed(const Duration(milliseconds: 500));
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ
    final updatedUser = await _getUserById(userId);
    if (updatedUser != null) {
      debugPrint('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ—Å–ª–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: teamId=${updatedUser.teamId}, teamName=${updatedUser.teamName}');
    }
  }

  // –†–ê–ë–û–¢–ê –° –ü–†–û–í–ï–†–ö–ê–ú–ò –ê–ö–¢–ò–í–ù–û–°–¢–ò –ò–ì–†–û–ö–û–í

  /// –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
  Future<String> createActivityCheck({
    required String teamId,
    required String organizerId,
    required String organizerName,
    required List<String> teamMembers,
  }) async {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã
    final activeCheck = await getActiveActivityCheck(teamId);
    if (activeCheck != null) {
      throw Exception('–£ –∫–æ–º–∞–Ω–¥—ã —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏');
    }

    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    final activityCheck = TeamActivityCheckModel.createNew(
      teamId: teamId,
      organizerId: organizerId,
      organizerName: organizerName,
      teamMembers: teamMembers,
    );

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Firestore
    final docRef = await _firestore
        .collection('team_activity_checks')
        .add(activityCheck.toMap());

    debugPrint('‚úÖ –°–æ–∑–¥–∞–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã $teamId: ${docRef.id}');
    return docRef.id;
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã
  Future<TeamActivityCheckModel?> getActiveActivityCheck(String teamId) async {
    try {
      final snapshot = await _firestore
          .collection('team_activity_checks')
          .where('teamId', isEqualTo: teamId)
          .where('isActive', isEqualTo: true)
          .orderBy('startedAt', descending: true)
          .limit(1)
          .get();

      if (snapshot.docs.isEmpty) return null;

      final activityCheck = TeamActivityCheckModel.fromMap(
        snapshot.docs.first.data(),
        snapshot.docs.first.id,
      );

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∏—Å—Ç–µ–∫–ª–∞ –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞
      if (activityCheck.isExpired) {
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≤–µ—Ä—à–∞–µ–º –∏—Å—Ç–µ–∫—à—É—é –ø—Ä–æ–≤–µ—Ä–∫—É
        await _completeActivityCheck(activityCheck.id);
        return null;
      }

      return activityCheck;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: $e');
      return null;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –ø–æ ID
  Future<TeamActivityCheckModel?> getActivityCheckById(String checkId) async {
    try {
      final doc = await _firestore
          .collection('team_activity_checks')
          .doc(checkId)
          .get();

      if (!doc.exists) return null;

      return TeamActivityCheckModel.fromMap(doc.data()!, doc.id);
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: $e');
      return null;
    }
  }

  /// –ò–≥—Ä–æ–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
  Future<void> confirmPlayerReadiness(String checkId, String playerId) async {
    final checkDoc = await _firestore
        .collection('team_activity_checks')
        .doc(checkId)
        .get();

    if (!checkDoc.exists) {
      throw Exception('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final activityCheck = TeamActivityCheckModel.fromMap(
      checkDoc.data()!,
      checkDoc.id,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—â–µ –∞–∫—Ç–∏–≤–Ω–∞
    if (!activityCheck.isActive || activityCheck.isExpired) {
      throw Exception('–í—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∏—Å—Ç–µ–∫–ª–æ');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –≤ —Å–ø–∏—Å–∫–µ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥—ã
    if (!activityCheck.teamMembers.contains(playerId)) {
      throw Exception('–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã');
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ –µ—â–µ –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å
    if (activityCheck.readyPlayers.contains(playerId)) {
      throw Exception('–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ —Å–≤–æ—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å');
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ —Å–ø–∏—Å–æ–∫ –≥–æ—Ç–æ–≤—ã—Ö
    final updatedReadyPlayers = [...activityCheck.readyPlayers, playerId];

    await _firestore
        .collection('team_activity_checks')
        .doc(checkId)
        .update({
      'readyPlayers': updatedReadyPlayers,
    });

    debugPrint('‚úÖ –ò–≥—Ä–æ–∫ $playerId –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç—å –≤ –ø—Ä–æ–≤–µ—Ä–∫–µ $checkId');

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≥–æ—Ç–æ–≤—ã –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏
    if (updatedReadyPlayers.length == activityCheck.teamMembers.length) {
      await _completeActivityCheck(checkId);
      debugPrint('üéâ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –∫–æ–º–∞–Ω–¥—ã ${activityCheck.teamId} –≥–æ—Ç–æ–≤—ã!');
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  Future<List<TeamActivityCheckModel>> getPlayerActivityChecks(String playerId) async {
    try {
      final snapshot = await _firestore
          .collection('team_activity_checks')
          .where('teamMembers', arrayContains: playerId)
          .where('isActive', isEqualTo: true)
          .orderBy('startedAt', descending: true)
          .get();

      final checks = snapshot.docs
          .map((doc) => TeamActivityCheckModel.fromMap(doc.data(), doc.id))
          .where((check) => !check.isExpired) // –§–∏–ª—å—Ç—Ä—É–µ–º –∏—Å—Ç–µ–∫—à–∏–µ
          .toList();

      return checks;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –¥–ª—è –∏–≥—Ä–æ–∫–∞: $e');
      return [];
    }
  }

  /// Stream –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∏–≥—Ä–æ–∫–∞
  Stream<List<TeamActivityCheckModel>> watchPlayerActivityChecks(String playerId) {
    return _firestore
        .collection('team_activity_checks')
        .where('teamMembers', arrayContains: playerId)
        .where('isActive', isEqualTo: true)
        .orderBy('startedAt', descending: true)
        .snapshots()
        .map((snapshot) => snapshot.docs
            .map((doc) => TeamActivityCheckModel.fromMap(doc.data(), doc.id))
            .where((check) => !check.isExpired)
            .toList());
  }

  /// Stream –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
  Stream<TeamActivityCheckModel?> watchActivityCheck(String checkId) {
    return _firestore
        .collection('team_activity_checks')
        .doc(checkId)
        .snapshots()
        .map((snapshot) {
          if (!snapshot.exists) return null;
          return TeamActivityCheckModel.fromMap(snapshot.data()!, snapshot.id);
        });
  }

  /// –ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  Future<void> _completeActivityCheck(String checkId) async {
    await _firestore
        .collection('team_activity_checks')
        .doc(checkId)
        .update({
      'isActive': false,
      'isCompleted': true,
    });

    debugPrint('‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ $checkId –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
  }

  /// –û—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä)
  Future<void> cancelActivityCheck(String checkId, String organizerId) async {
    final checkDoc = await _firestore
        .collection('team_activity_checks')
        .doc(checkId)
        .get();

    if (!checkDoc.exists) {
      throw Exception('–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    }

    final activityCheck = TeamActivityCheckModel.fromMap(
      checkDoc.data()!,
      checkDoc.id,
    );

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
    if (activityCheck.organizerId != organizerId) {
      throw Exception('–¢–æ–ª—å–∫–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    }

    await _firestore
        .collection('team_activity_checks')
        .doc(checkId)
        .update({
      'isActive': false,
      'isCompleted': false,
    });

    debugPrint('‚ùå –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ $checkId –æ—Ç–º–µ–Ω–µ–Ω–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º');
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å —Å—Ç–∞—Ä—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ (—Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
  Future<void> cleanupOldActivityChecks() async {
    try {
      final cutoffTime = DateTime.now().subtract(const Duration(hours: 24));
      
      final snapshot = await _firestore
          .collection('team_activity_checks')
          .where('startedAt', isLessThan: Timestamp.fromDate(cutoffTime))
          .get();

      final batch = _firestore.batch();
      
      for (final doc in snapshot.docs) {
        batch.delete(doc.reference);
      }

      await batch.commit();
      
      debugPrint('üßπ –£–¥–∞–ª–µ–Ω–æ ${snapshot.docs.length} —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏');
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ —Å—Ç–∞—Ä—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: $e');
    }
  }
} 