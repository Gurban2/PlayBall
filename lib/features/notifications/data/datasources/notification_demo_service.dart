import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../../../rooms/domain/entities/room_model.dart';
import '../../../auth/domain/entities/user_model.dart';
import '../../domain/entities/game_notification_model.dart';
import 'game_notification_service.dart';

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —Å–µ—Ä–≤–∏—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
class NotificationDemoService {
  final GameNotificationService _gameNotificationService;
  final Uuid _uuid = const Uuid();

  NotificationDemoService(this._gameNotificationService);

  /// –°–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
  Future<void> createDemoNotifications(UserModel currentUser) async {
    try {
      debugPrint('üé≠ –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è ${currentUser.name}');

      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω—É—é –∫–æ–º–Ω–∞—Ç—É
      final demoRoom = RoomModel(
        id: _uuid.v4(),
        title: '–í–æ–ª–µ–π–±–æ–ª –Ω–∞ –ø–ª—è–∂–µ –Æ–∂–Ω–æ–º',
        description: '–î—Ä—É–∂–µ—Å–∫–∞—è –∏–≥—Ä–∞ –Ω–∞ –ø–µ—Å—á–∞–Ω–æ–º –∫–æ—Ä—Ç–µ',
        location: '–ü–ª—è–∂ –Æ–∂–Ω—ã–π, –∫–æ—Ä—Ç ‚Ññ3',
        startTime: DateTime.now().add(const Duration(hours: 2)),
        endTime: DateTime.now().add(const Duration(hours: 4)),
        organizerId: 'demo_organizer_id',
        participants: [currentUser.id, 'player2', 'player3'],
        maxParticipants: 12,
        pricePerPerson: 300.0,
        createdAt: DateTime.now(),
      );

      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞
      final demoOrganizer = UserModel(
        id: 'demo_organizer_id',
        email: 'organizer@demo.com',
        name: '–ê–ª–µ–∫—Å–µ–π –ü–µ—Ç—Ä–æ–≤',
        role: UserRole.organizer,
        createdAt: DateTime.now(),
        gamesPlayed: 45,
        wins: 28,
        losses: 17,
      );

      // 1. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–æ–≤–æ–π –∏–≥—Ä–µ
      await _gameNotificationService.notifyGameCreated(
        room: demoRoom,
        organizer: demoOrganizer,
        specificRecipients: [currentUser.id],
      );

      // 2. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –∏–≥—Ä–µ
      await _gameNotificationService.notifyGameUpdated(
        room: demoRoom.copyWith(
          participants: [currentUser.id, 'player2', 'player3', 'player4'],
        ),
        organizer: demoOrganizer,
        changes: '–î–æ–±–∞–≤–ª–µ–Ω –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫',
      );

      // 3. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ —Å–∫–æ—Ä–æ–º –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
      await _gameNotificationService.notifyGameStarting(
        room: demoRoom.copyWith(
          startTime: DateTime.now().add(const Duration(minutes: 30)),
        ),
        organizer: demoOrganizer,
        minutesLeft: 30,
      );

      // 4. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–∫–∞
      await _gameNotificationService.notifyPlayerJoined(
        room: demoRoom,
        organizer: demoOrganizer,
        player: UserModel(
          id: 'new_player_id',
          email: 'newplayer@demo.com',
          name: '–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞',
          role: UserRole.user,
          createdAt: DateTime.now(),
          gamesPlayed: 12,
          wins: 8,
          losses: 4,
        ),
      );

      // 5. –°–æ–∑–¥–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∏–≥—Ä—É –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
      final completedRoom = demoRoom.copyWith(
        title: '–¢—É—Ä–Ω–∏—Ä "–õ–µ—Ç–Ω–∏–π –∫—É–±–æ–∫"',
        status: RoomStatus.completed,
        startTime: DateTime.now().subtract(const Duration(hours: 3)),
        endTime: DateTime.now().subtract(const Duration(hours: 1)),
      );

      await _gameNotificationService.notifyGameEnded(
        room: completedRoom,
        organizer: demoOrganizer,
        winnerTeamName: '–ö–æ–º–∞–Ω–¥–∞ –ú–æ–ª–Ω–∏—è',
      );

      // 6. –û—Ç–º–µ–Ω–µ–Ω–Ω–∞—è –∏–≥—Ä–∞
      final cancelledRoom = demoRoom.copyWith(
        title: '–ò–≥—Ä–∞ –≤ —Å–ø–æ—Ä—Ç–∑–∞–ª–µ —à–∫–æ–ª—ã ‚Ññ5',
        status: RoomStatus.cancelled,
        startTime: DateTime.now().add(const Duration(days: 1)),
      );

      await _gameNotificationService.notifyGameCancelled(
        room: cancelledRoom,
        organizer: demoOrganizer,
        reason: '–ü–ª–æ—Ö–∞—è –ø–æ–≥–æ–¥–∞',
      );

      debugPrint('‚úÖ –°–æ–∑–¥–∞–Ω–æ 6 –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
      rethrow;
    }
  }

  /// –°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> createVarietyDemoNotifications(UserModel currentUser) async {
    try {
      debugPrint('üåà –°–æ–∑–¥–∞–µ–º —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è');

      final organizers = [
        UserModel(
          id: 'org1',
          email: 'org1@demo.com',
          name: '–î–º–∏—Ç—Ä–∏–π –ö–æ–∑–ª–æ–≤',
          role: UserRole.organizer,
          createdAt: DateTime.now(),
          gamesPlayed: 150,
          wins: 95,
          losses: 55,
        ),
        UserModel(
          id: 'org2',
          email: 'org2@demo.com',
          name: '–ï–ª–µ–Ω–∞ –°–º–∏—Ä–Ω–æ–≤–∞',
          role: UserRole.organizer,
          createdAt: DateTime.now(),
          gamesPlayed: 89,
          wins: 67,
          losses: 22,
        ),
      ];

      final rooms = [
        RoomModel(
          id: _uuid.v4(),
          title: '–£—Ç—Ä–µ–Ω–Ω—è—è —Ä–∞–∑–º–∏–Ω–∫–∞',
          description: '–õ–µ–≥–∫–∞—è –∏–≥—Ä–∞ –¥–ª—è –Ω–∞—á–∞–ª–∞ –¥–Ω—è',
          location: '–°—Ç–∞–¥–∏–æ–Ω "–î–∏–Ω–∞–º–æ"',
          startTime: DateTime.now().add(const Duration(hours: 16)),
          endTime: DateTime.now().add(const Duration(hours: 18)),
          organizerId: organizers[0].id,
          participants: [currentUser.id],
          maxParticipants: 8,
          pricePerPerson: 200.0,
          createdAt: DateTime.now(),
        ),
        RoomModel(
          id: _uuid.v4(),
          title: '–í–µ—á–µ—Ä–Ω–∏–π —Ç—É—Ä–Ω–∏—Ä',
          description: '–°–æ—Ä–µ–≤–Ω–æ–≤–∞—Ç–µ–ª—å–Ω–∞—è –∏–≥—Ä–∞',
          location: '–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Å "–ê—Ä–µ–Ω–∞"',
          startTime: DateTime.now().add(const Duration(days: 1, hours: 3)),
          endTime: DateTime.now().add(const Duration(days: 1, hours: 5)),
          organizerId: organizers[1].id,
          participants: [currentUser.id, 'p1', 'p2', 'p3'],
          maxParticipants: 16,
          pricePerPerson: 500.0,
          createdAt: DateTime.now(),
        ),
      ];

      // –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      for (int i = 0; i < organizers.length; i++) {
        final organizer = organizers[i];
        final room = rooms[i];

        // –ù–æ–≤–∞—è –∏–≥—Ä–∞
        await _gameNotificationService.notifyGameCreated(
          room: room,
          organizer: organizer,
          specificRecipients: [currentUser.id],
        );

        // –ò–≥—Ä–∞ —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è (—Ä–∞–∑–Ω–æ–µ –≤—Ä–µ–º—è)
        await _gameNotificationService.notifyGameStarting(
          room: room,
          organizer: organizer,
          minutesLeft: i == 0 ? 15 : 60,
        );
      }

      // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è
      await Future.delayed(const Duration(milliseconds: 100));

      // –ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å
      await _gameNotificationService.notifyGameStarted(
        room: rooms[0],
        organizer: organizers[0],
      );

      // –ò–∑–º–µ–Ω–µ–Ω–∏—è –≤ –∏–≥—Ä–µ
      await _gameNotificationService.notifyGameUpdated(
        room: rooms[1],
        organizer: organizers[1],
        changes: '–ò–∑–º–µ–Ω–µ–Ω–æ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–∞ 30 –º–∏–Ω—É—Ç –ø–æ–∑–∂–µ',
      );

      debugPrint('‚úÖ –°–æ–∑–¥–∞–Ω–æ –º–Ω–æ–∂–µ—Å—Ç–≤–æ —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
      rethrow;
    }
  }

  /// –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
  Future<void> clearDemoNotifications(String userId) async {
    try {
      debugPrint('üßπ –û—á–∏—â–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: $userId');

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      final notifications = await _gameNotificationService.getGameNotifications(userId);
      
      // –£–¥–∞–ª—è–µ–º –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤
      final demoOrganizerIds = [
        'demo_organizer_id',
        'org1',
        'org2',
      ];

      for (final notification in notifications) {
        if (demoOrganizerIds.contains(notification.organizerId)) {
          await _gameNotificationService.deleteNotification(notification.id);
        }
      }

      debugPrint('‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
      rethrow;
    }
  }

  /// –°–∏–º—É–ª—è—Ü–∏—è real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Future<void> simulateRealTimeNotifications(UserModel currentUser) async {
    try {
      debugPrint('‚ö° –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∏–º—É–ª—è—Ü–∏—é real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π');

      final organizer = UserModel(
        id: 'realtime_org',
        email: 'realtime@demo.com',
        name: '–°–µ—Ä–≥–µ–π –í–æ–ª–∫–æ–≤',
        role: UserRole.organizer,
        createdAt: DateTime.now(),
        gamesPlayed: 75,
        wins: 50,
        losses: 25,
      );

      final room = RoomModel(
        id: _uuid.v4(),
        title: 'Real-time –¥–µ–º–æ –∏–≥—Ä–∞',
        description: '–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏',
        location: '–í–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –∫–æ—Ä—Ç',
        startTime: DateTime.now().add(const Duration(minutes: 5)),
        endTime: DateTime.now().add(const Duration(hours: 2)),
        organizerId: organizer.id,
        participants: [currentUser.id],
        maxParticipants: 10,
        pricePerPerson: 100.0,
        createdAt: DateTime.now(),
      );

      // –°–µ—Ä–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π —Å –∑–∞–¥–µ—Ä–∂–∫–∞–º–∏
      await _gameNotificationService.notifyGameCreated(
        room: room,
        organizer: organizer,
        specificRecipients: [currentUser.id],
      );

      await Future.delayed(const Duration(seconds: 2));

      await _gameNotificationService.notifyPlayerJoined(
        room: room,
        organizer: organizer,
        player: UserModel(
          id: 'rt_player1',
          email: 'player1@demo.com',
          name: '–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞',
          role: UserRole.user,
          createdAt: DateTime.now(),
          gamesPlayed: 25,
          wins: 15,
          losses: 10,
        ),
      );

      await Future.delayed(const Duration(seconds: 3));

      await _gameNotificationService.notifyGameStarting(
        room: room,
        organizer: organizer,
        minutesLeft: 5,
      );

      debugPrint('‚úÖ Real-time —Å–∏–º—É–ª—è—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');

    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–∏–º—É–ª—è—Ü–∏–∏ real-time —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: $e');
      rethrow;
    }
  }
} 