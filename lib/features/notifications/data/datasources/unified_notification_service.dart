import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import '../../../auth/data/datasources/user_service.dart';
import '../../../teams/data/datasources/team_service.dart';
import '../../../profile/domain/entities/friend_request_model.dart';
import '../../../teams/domain/entities/team_invitation_model.dart';
import '../../domain/entities/unified_notification_model.dart';

class UnifiedNotificationService {
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final UserService _userService;
  final TeamService _teamService;

  UnifiedNotificationService(this._userService, this._teamService);

  // –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –≤—Ö–æ–¥—è—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è + –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏)
  Future<List<UnifiedNotificationModel>> getIncomingNotifications(String userId) async {
    List<UnifiedNotificationModel> notifications = [];

    // –ü–æ–ª—É—á–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
    final friendRequests = await _userService.getIncomingFriendRequests(userId);
    for (final request in friendRequests) {
      notifications.add(UnifiedNotificationModel.friendRequest(
        id: request.id,
        toUserId: request.toUserId,
        fromUserId: request.fromUserId,
        fromUserName: request.fromUserName,
        toUserName: request.toUserName,
        fromUserPhotoUrl: request.fromUserPhotoUrl,
        toUserPhotoUrl: request.toUserPhotoUrl,
        createdAt: request.createdAt,
        status: _mapFriendRequestStatus(request.status),
        respondedAt: request.respondedAt,
      ));
    }

    // –ü–æ–ª—É—á–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã
    final teamInvitations = await _teamService.getIncomingTeamInvitations(userId);
    for (final invitation in teamInvitations) {
      notifications.add(UnifiedNotificationModel.teamInvitation(
        id: invitation.id,
        toUserId: invitation.toUserId,
        fromUserId: invitation.fromUserId,
        fromUserName: invitation.fromUserName,
        toUserName: invitation.toUserName,
        teamId: invitation.teamId,
        teamName: invitation.teamName,
        fromUserPhotoUrl: invitation.fromUserPhotoUrl,
        toUserPhotoUrl: invitation.toUserPhotoUrl,
        replacedUserId: invitation.replacedUserId,
        replacedUserName: invitation.replacedUserName,
        createdAt: invitation.createdAt,
        status: _mapTeamInvitationStatus(invitation.status),
        respondedAt: invitation.respondedAt,
      ));
    }

    // –ü–æ–ª—É—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏ notifications
    final notificationSnapshot = await _firestore
        .collection('notifications')
        .where('toUserId', isEqualTo: userId)
        .where('type', isEqualTo: 'team_exclusion')
        .orderBy('createdAt', descending: true)
        .get();

    for (final doc in notificationSnapshot.docs) {
      final data = doc.data();
      notifications.add(UnifiedNotificationModel.teamExclusion(
        id: doc.id,
        toUserId: data['toUserId'],
        teamId: data['teamId'],
        teamName: data['teamName'],
        replacedByUserId: data['replacedByUserId'],
        replacedByUserName: data['replacedByUserName'],
        createdAt: (data['createdAt'] as Timestamp).toDate(),
      ));
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    notifications.sort((a, b) => b.createdAt.compareTo(a.createdAt));

    return notifications;
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤ - –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è –∏ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã)
  Future<List<UnifiedNotificationModel>> getOutgoingNotifications(String userId) async {
    final List<UnifiedNotificationModel> notifications = [];

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è (–¥–æ—Å—Ç—É–ø–Ω–æ –≤—Å–µ–º)
    final outgoingFriendRequests = await _userService.getOutgoingFriendRequests(userId);
    for (final request in outgoingFriendRequests) {
      notifications.add(UnifiedNotificationModel.friendRequest(
        id: request.id,
        toUserId: request.toUserId,
        fromUserId: request.fromUserId,
        fromUserName: request.fromUserName,
        toUserName: request.toUserName,
        fromUserPhotoUrl: request.fromUserPhotoUrl,
        toUserPhotoUrl: request.toUserPhotoUrl,
        createdAt: request.createdAt,
        status: _mapFriendRequestStatus(request.status),
        respondedAt: request.respondedAt,
      ));
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–≤/–∞–¥–º–∏–Ω–æ–≤)
    try {
      final outgoingTeamInvitations = await _teamService.getOutgoingTeamInvitations(userId);
      for (final invitation in outgoingTeamInvitations) {
        notifications.add(UnifiedNotificationModel.teamInvitation(
          id: invitation.id,
          toUserId: invitation.toUserId,
          fromUserId: invitation.fromUserId,
          fromUserName: invitation.fromUserName,
          toUserName: invitation.toUserName,
          teamId: invitation.teamId,
          teamName: invitation.teamName,
          fromUserPhotoUrl: invitation.fromUserPhotoUrl,
          toUserPhotoUrl: invitation.toUserPhotoUrl,
          replacedUserId: invitation.replacedUserId,
          replacedUserName: invitation.replacedUserName,
          createdAt: invitation.createdAt,
          status: _mapTeamInvitationStatus(invitation.status),
          respondedAt: invitation.respondedAt,
        ));
      }
    } catch (e) {
      // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä/–∞–¥–º–∏–Ω, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã
      debugPrint('üîç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥—è—â–∏–µ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã: $e');
    }

    // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è (–Ω–æ–≤—ã–µ —Å–Ω–∞—á–∞–ª–∞)
    notifications.sort((a, b) => b.createdAt.compareTo(a.createdAt));

    return notifications;
  }

  // –ü—Ä–∏–Ω—è—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> acceptNotification(UnifiedNotificationModel notification) async {
    switch (notification.type) {
      case UnifiedNotificationType.friendRequest:
        await _userService.acceptFriendRequest(notification.id);
        break;
      case UnifiedNotificationType.teamInvitation:
        await _teamService.acceptTeamInvitation(notification.id);
        break;
      case UnifiedNotificationType.teamExclusion:
        // –ü—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        await markNotificationAsRead(notification.id);
        break;
    }
  }

  // –û—Ç–∫–ª–æ–Ω–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> declineNotification(UnifiedNotificationModel notification) async {
    switch (notification.type) {
      case UnifiedNotificationType.friendRequest:
        await _userService.declineFriendRequest(notification.id);
        break;
      case UnifiedNotificationType.teamInvitation:
        await _teamService.declineTeamInvitation(notification.id);
        break;
      case UnifiedNotificationType.teamExclusion:
        // –ü—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
        await markNotificationAsRead(notification.id);
        break;
    }
  }

  // –û—Ç–º–µ–Ω–∏—Ç—å –∏—Å—Ö–æ–¥—è—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
  Future<void> cancelOutgoingNotification(UnifiedNotificationModel notification) async {
    switch (notification.type) {
      case UnifiedNotificationType.friendRequest:
        if (notification.fromUserId != null) {
          await _userService.cancelFriendRequest(
            notification.fromUserId!, 
            notification.toUserId,
          );
        }
        break;
      case UnifiedNotificationType.teamInvitation:
        if (notification.teamId != null) {
          await _teamService.cancelTeamInvitation(
            notification.teamId!, 
            notification.toUserId,
          );
        }
        break;
      case UnifiedNotificationType.teamExclusion:
        // –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å
        break;
    }
  }

  // –ü–æ–º–µ—Ç–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
  Future<void> markNotificationAsRead(String notificationId) async {
    await _firestore.collection('notifications').doc(notificationId).update({
      'isRead': true,
      'updatedAt': Timestamp.now(),
    });
  }

  // –ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è + –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã + —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏)
  Future<int> getUnreadNotificationsCount(String userId) async {
    int count = 0;

    // –°—á–∏—Ç–∞–µ–º –∑–∞—è–≤–∫–∏ –≤ –¥—Ä—É–∑—å—è
    final friendRequests = await _userService.getIncomingFriendRequests(userId);
    count += friendRequests.length;

    // –°—á–∏—Ç–∞–µ–º –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏—è –≤ –∫–æ–º–∞–Ω–¥—ã
    final teamInvitations = await _teamService.getIncomingTeamInvitations(userId);
    count += teamInvitations.length;

    // –°—á–∏—Ç–∞–µ–º –Ω–µ–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å–∫–ª—é—á–µ–Ω–∏–∏
    final notificationSnapshot = await _firestore
        .collection('notifications')
        .where('toUserId', isEqualTo: userId)
        .where('isRead', isEqualTo: false)
        .get();
    count += notificationSnapshot.docs.length;

    return count;
  }

  // –ú–∞–ø–ø–∏–Ω–≥ —Å—Ç–∞—Ç—É—Å–æ–≤
  UnifiedNotificationStatus _mapFriendRequestStatus(FriendRequestStatus status) {
    switch (status) {
      case FriendRequestStatus.pending:
        return UnifiedNotificationStatus.pending;
      case FriendRequestStatus.accepted:
        return UnifiedNotificationStatus.accepted;
      case FriendRequestStatus.declined:
        return UnifiedNotificationStatus.declined;
    }
  }

  UnifiedNotificationStatus _mapTeamInvitationStatus(TeamInvitationStatus status) {
    switch (status) {
      case TeamInvitationStatus.pending:
        return UnifiedNotificationStatus.pending;
      case TeamInvitationStatus.accepted:
        return UnifiedNotificationStatus.accepted;
      case TeamInvitationStatus.declined:
        return UnifiedNotificationStatus.declined;
    }
  }
} 