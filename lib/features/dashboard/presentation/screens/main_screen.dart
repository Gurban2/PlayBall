import 'package:flutter/material.dart';
import 'package:flutter_riverpod/flutter_riverpod.dart';
import 'package:go_router/go_router.dart';
import 'dart:async';
import '../../../../core/constants/constants.dart';
import '../../../../core/errors/error_handler.dart';
import '../../../../core/providers.dart';
import '../../../../core/services/background_scheduler_service.dart';
import '../../../../shared/widgets/navigation/hamburger_menu.dart';
import '../../../auth/domain/entities/user_model.dart';








// –û–±—ë—Ä—Ç–∫–∞ –¥–ª—è –ø–æ–∫–∞–∑–∞ –Ω–∏–∂–Ω–µ–π –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –Ω–∞ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö
class ScaffoldWithBottomNav extends ConsumerStatefulWidget {
  final Widget child;
  final String currentRoute;

  const ScaffoldWithBottomNav({
    super.key,
    required this.child,
    required this.currentRoute,
  });

  @override
  ConsumerState<ScaffoldWithBottomNav> createState() => _ScaffoldWithBottomNavState();
}

class _ScaffoldWithBottomNavState extends ConsumerState<ScaffoldWithBottomNav> 
    with WidgetsBindingObserver {
  int selectedIndex = 0;

  @override
  void initState() {
    super.initState();
    
    // –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    WidgetsBinding.instance.addObserver(this);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    WidgetsBinding.instance.addPostFrameCallback((_) {
      if (mounted) {
        final backgroundScheduler = ref.read(backgroundSchedulerServiceProvider);
        backgroundScheduler.start(ref);
      }
    });
  }

  @override
  void dispose() {
    // –û—Ç–ø–∏—Å—ã–≤–∞–µ–º—Å—è –æ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    WidgetsBinding.instance.removeObserver(this);
    
    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    try {
      final backgroundScheduler = ref.read(backgroundSchedulerServiceProvider);
      backgroundScheduler.stop();
    } catch (e) {
      // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –ø—Ä–∏ dispose
    }
    super.dispose();
  }

  @override
  void didChangeAppLifecycleState(AppLifecycleState state) {
    super.didChangeAppLifecycleState(state);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø—Ä–∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏–∏ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    if (state == AppLifecycleState.resumed && mounted) {
      debugPrint('üîÑ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ - –æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã');
      
      // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä—ã –¥–∞–Ω–Ω—ã—Ö
      // ignore: unused_result
      ref.refresh(currentUserProvider);
      // ignore: unused_result
      ref.refresh(activeRoomsProvider);
      // ignore: unused_result
      ref.refresh(plannedRoomsProvider);
      // ignore: unused_result
      ref.refresh(userRoomsProvider);
      
      // –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
      final backgroundScheduler = ref.read(backgroundSchedulerServiceProvider);
      backgroundScheduler.stop();
      backgroundScheduler.start(ref);
    }
  }

  // –°—Ç—Ä–∞–Ω–∏—Ü—ã, –≥–¥–µ –Ω–∏–∂–Ω—è—è –Ω–∞–≤–∏–≥–∞—Ü–∏—è –ù–ï –¥–æ–ª–∂–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è
  static const List<String> _pagesWithoutBottomNav = [
    '/welcome',
    '/login',
    '/register',
  ];

  bool _shouldShowBottomNav() {
    return !_pagesWithoutBottomNav.any((page) => widget.currentRoute.startsWith(page));
  }

  int _getSelectedIndex(String route) {
    if (route.startsWith('/home') || 
        route.startsWith('/schedule') ||
        route == '/' ||
        route.startsWith('/organizer-dashboard') ||
        route.startsWith('/room') ||
        route.startsWith('/create-room')) {
      return 0; // –ì–ª–∞–≤–Ω–∞—è/–ò–≥—Ä—ã
    } else if (route.startsWith('/team-') || 
               route.startsWith('/my-team')) {
      return 1; // –ö–æ–º–∞–Ω–¥—ã
    }
    return 0; // –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≥–ª–∞–≤–Ω–∞—è
  }

  @override
  Widget build(BuildContext context) {
    final userAsync = ref.watch(currentUserProvider);
    
    return userAsync.when(
      loading: () => Scaffold(
        body: widget.child,
      ),
      error: (error, stack) => Scaffold(
        body: widget.child,
      ),
      data: (user) {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –∏–ª–∏ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–∞—Ö –±–µ–∑ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        if (user == null || !_shouldShowBottomNav()) {
          return Scaffold(body: widget.child);
        }

        final selectedIndex = _getSelectedIndex(widget.currentRoute);

        return Scaffold(
          appBar: AppBar(
            backgroundColor: AppColors.darkGrey,
            foregroundColor: Colors.white,
            toolbarHeight: 36, // –£–≤–µ–ª–∏—á–∏–ª –¥–ª—è –Ω–æ–≤–æ–≥–æ –¥–∏–∑–∞–π–Ω–∞
            titleSpacing: 0,
            title: Container(
              padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 6),
              child: Row(
                children: [
                  // –õ–µ–≤—ã–π —É–≥–æ–ª - –∏–∫–æ–Ω–∫–∞ –∏–≥—Ä—ã (24px)
                  Container(
                    width: 24,
                    height: 24,
                    decoration: BoxDecoration(
                      color: AppColors.primary,
                      borderRadius: BorderRadius.circular(6),
                    ),
                    child: const Icon(
                      Icons.sports_volleyball,
                      size: 16,
                      color: Colors.white,
                    ),
                  ),
                  
                  const Spacer(),
                  
                  // –¶–µ–Ω—Ç—Ä - —Å–µ–ª–µ–∫—Ç–æ—Ä –≤–æ–ª–µ–π–±–æ–ª/—Ñ—É—Ç–±–æ–ª
                  Container(
                    padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 4),
                  
                    child: DropdownButton<String>(
                      value: 'volleyball',
                      underline: const SizedBox(),
                      icon: const Icon(Icons.expand_more, color: Colors.white, size: 16),
                      style: const TextStyle(color: Colors.white, fontSize: 14),
                      dropdownColor: AppColors.darkGrey,
                      items: [
                        DropdownMenuItem(
                          value: 'volleyball',
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(Icons.sports_volleyball, size: 16, color: Colors.white),
                              SizedBox(width: 6),
                              Text('–í–æ–ª–µ–π–±–æ–ª'),
                            ],
                          ),
                        ),
                        DropdownMenuItem(
                          value: 'football',
                          child: Row(
                            mainAxisSize: MainAxisSize.min,
                            children: [
                              Icon(Icons.sports_soccer, size: 16, color: Colors.grey),
                              SizedBox(width: 6),
                              Text('–§—É—Ç–±–æ–ª', style: TextStyle(color: Colors.grey)),
                            ],
                          ),
                        ),
                      ],
                      onChanged: (value) {
                        if (value == 'football') {
                          ErrorHandler.showInfo(context, '–§—É—Ç–±–æ–ª –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–µ–Ω –≤ —Å–ª–µ–¥—É—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è—Ö');
                        }
                      },
                    ),
                  ),
                  
                  const Spacer(),
                  
                  // –ü—Ä–∞–≤—ã–π —É–≥–æ–ª - hamburger menu
                  const HamburgerMenu(),
                ],
              ),
            ),
            automaticallyImplyLeading: false,
            elevation: 1,
          ),
          body: widget.child,
                bottomNavigationBar: Container(
        height: 52, // –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤—ã—Å–æ—Ç–∞ –∫–∞–∫ –≤ –∫–∞—Ä—Ç–æ—á–∫–∞—Ö
        decoration: BoxDecoration(
          color: AppColors.darkGrey,
          boxShadow: [
            BoxShadow(
              color: Colors.black.withValues(alpha: 0.1),
              blurRadius: 6, // –£–º–µ–Ω—å—à–∏–ª —Å 10 –¥–æ 6
              offset: const Offset(0, -1), // –£–º–µ–Ω—å—à–∏–ª —Å -2 –¥–æ -1
            ),
          ],
        ),
            child: BottomNavigationBar(
              currentIndex: selectedIndex,
              onTap: (index) => _onTabTapped(context, index),
              type: BottomNavigationBarType.fixed,
              backgroundColor: Colors.transparent,
              selectedItemColor: Colors.white,
              unselectedItemColor: AppColors.lightGrey,
              selectedLabelStyle: const TextStyle(
                fontWeight: FontWeight.w600,
                fontSize: 10, // –£–º–µ–Ω—å—à–∏–ª —Å 12 –¥–æ 10
                color: Colors.white,
              ),
              unselectedLabelStyle: const TextStyle(
                fontWeight: FontWeight.w500,
                fontSize: 9, // –£–º–µ–Ω—å—à–∏–ª —Å 11 –¥–æ 9
                color: AppColors.lightGrey,
              ),
              elevation: 0,
              items: [
                const BottomNavigationBarItem(
                  icon: Icon(Icons.sports_volleyball_outlined),
                  activeIcon: Icon(Icons.sports_volleyball),
                  label: '–ò–≥—Ä—ã',
                ),
                const BottomNavigationBarItem(
                  icon: Icon(Icons.groups_outlined),
                  activeIcon: Icon(Icons.groups),
                  label: '–ö–æ–º–∞–Ω–¥–∞',
                ),
              ],
            ),
          ),
          floatingActionButton: (user.role == UserRole.organizer || user.role == UserRole.admin)
              ? FloatingActionButton(
                  onPressed: () => context.push('/create-room'),
                  backgroundColor: AppColors.darkGrey,
                  foregroundColor: Colors.white,
                  elevation: 8,
                  child: const Icon(Icons.add, size: 28),
                )
              : null,
          floatingActionButtonLocation: FloatingActionButtonLocation.endFloat,
        );
      },
    );
  }

  void _onTabTapped(BuildContext context, int index) {
    setState(() {
      selectedIndex = index;
    });

    switch (index) {
      case 0: // –ò–≥—Ä—ã
        context.go(AppRoutes.home);
        break;
      case 1: // –ö–æ–º–∞–Ω–¥—ã
        context.go(AppRoutes.myTeam);
        break;
    }
  }

  String _getInitials(String name) {
    final parts = name.split(' ');
    if (parts.length >= 2) {
      return '${parts[0][0]}${parts[1][0]}'.toUpperCase();
    } else if (name.isNotEmpty) {
      return name[0].toUpperCase();
    }
    return '';
  }
} 