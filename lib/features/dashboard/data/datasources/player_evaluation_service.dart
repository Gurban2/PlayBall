import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:flutter/foundation.dart';
import 'package:uuid/uuid.dart';
import '../../../auth/data/datasources/user_service.dart';
import '../../../notifications/data/datasources/game_notification_service.dart';
import '../../../rooms/data/datasources/room_service.dart';
import '../../domain/entities/player_evaluation_model.dart';

class PlayerEvaluationService {
  static const String _collection = 'player_evaluations';
  final FirebaseFirestore _firestore = FirebaseFirestore.instance;
  final Uuid _uuid = const Uuid();

  /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –∏–≥—Ä–æ–∫–æ–≤
  Future<void> savePlayerEvaluations({
    required String gameId,
    required String organizerId,
    required List<String> selectedPlayerIds,
    String? comment,
  }) async {
    try {
      final batch = _firestore.batch();
      final now = DateTime.now();
      final userService = UserService();
      final gameNotificationService = GameNotificationService();
      final roomService = RoomService();

      // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–µ –∏ –∏–≥—Ä–µ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
      final organizer = await userService.getUserById(organizerId);
      final room = await roomService.getRoomById(gameId);
      
      if (organizer == null) {
        throw Exception('–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω');
      }
      
      if (room == null) {
        throw Exception('–ò–≥—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
      }

      debugPrint('üíæ –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ü–µ–Ω–∫–∏ –æ—Ç ${organizer.name} –¥–ª—è –∏–≥—Ä—ã $gameId');
      debugPrint('‚≠ê –û—Ü–µ–Ω–µ–Ω–Ω—ã–µ –∏–≥—Ä–æ–∫–∏: $selectedPlayerIds');

      for (final playerId in selectedPlayerIds) {
        // –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –æ—Ü–µ–Ω–∫–∏
        final evaluation = PlayerEvaluationModel(
          id: _uuid.v4(),
          gameId: gameId,
          organizerId: organizerId,
          playerId: playerId,
          points: 1, // –ö–∞–∂–¥—ã–π –≤—ã–±—Ä–∞–Ω–Ω—ã–π –∏–≥—Ä–æ–∫ –ø–æ–ª—É—á–∞–µ—Ç 1 –±–∞–ª–ª
          comment: comment,
          createdAt: now,
        );

        final evalDoc = _firestore.collection(_collection).doc(evaluation.id);
        batch.set(evalDoc, evaluation.toMap());

        // –ù–∞—á–∏—Å–ª—è–µ–º +1 –±–∞–ª–ª –∏–≥—Ä–æ–∫—É
        final playerDoc = _firestore.collection('users').doc(playerId);
        batch.update(playerDoc, {
          'totalScore': FieldValue.increment(1),
          'organizerPoints': FieldValue.increment(1),
          'lastEvaluatedAt': Timestamp.fromDate(now),
        });

        debugPrint('‚úÖ +1 –±–∞–ª–ª –¥–ª—è –∏–≥—Ä–æ–∫–∞ $playerId');
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ batch
      await batch.commit();

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ü–µ–Ω–µ–Ω–Ω—ã–º –∏–≥—Ä–æ–∫–∞–º
      for (final playerId in selectedPlayerIds) {
        try {
          final evaluatedPlayer = await userService.getUserById(playerId);
          if (evaluatedPlayer != null) {
            await gameNotificationService.notifyPlayerEvaluated(
              room: room,
              organizer: organizer,
              evaluatedPlayer: evaluatedPlayer,
              rating: 5.0, // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –æ—Ü–µ–Ω–∫–∞ –∑–∞ –≤—ã–±–æ—Ä –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–æ–º
              evaluatorName: organizer.name,
            );
            debugPrint('üì® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∏–≥—Ä–æ–∫—É ${evaluatedPlayer.name}');
          }
        } catch (e) {
          debugPrint('‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∏–≥—Ä–æ–∫—É $playerId: $e');
          // –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ, –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞—è –ø—Ä–æ—Ü–µ—Å—Å
        }
      }

      debugPrint('üéâ –í—Å–µ –æ—Ü–µ–Ω–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã!');
      
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫: $e');
      rethrow;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∏–≥—Ä—ã
  Future<List<PlayerEvaluationModel>> getGameEvaluations(String gameId) async {
    try {
      final querySnapshot = await _firestore
          .collection(_collection)
          .where('gameId', isEqualTo: gameId)
          .get();

      return querySnapshot.docs
          .map((doc) => PlayerEvaluationModel.fromMap(doc.data()))
          .toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –∏–≥—Ä—ã: $e');
      return [];
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å –æ—Ü–µ–Ω–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–≥—Ä–æ–∫–∞
  Future<List<PlayerEvaluationModel>> getPlayerEvaluations(String playerId) async {
    try {
      final querySnapshot = await _firestore
          .collection(_collection)
          .where('playerId', isEqualTo: playerId)
          .orderBy('createdAt', descending: true)
          .get();

      return querySnapshot.docs
          .map((doc) => PlayerEvaluationModel.fromMap(doc.data()))
          .toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ü–µ–Ω–æ–∫ –∏–≥—Ä–æ–∫–∞: $e');
      return [];
    }
  }

  /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å, –æ—Ü–µ–Ω–∏–ª –ª–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä —É–∂–µ —ç—Ç—É –∏–≥—Ä—É
  Future<bool> hasOrganizerEvaluated({
    required String gameId,
    required String organizerId,
  }) async {
    try {
      final querySnapshot = await _firestore
          .collection(_collection)
          .where('gameId', isEqualTo: gameId)
          .where('organizerId', isEqualTo: organizerId)
          .limit(1)
          .get();

      return querySnapshot.docs.isNotEmpty;
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ü–µ–Ω–∫–∏ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞: $e');
      return false;
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –æ—Ü–µ–Ω–æ–∫ –∏–≥—Ä–æ–∫–∞
  Future<Map<String, int>> getPlayerEvaluationStats(String playerId) async {
    try {
      final evaluations = await getPlayerEvaluations(playerId);
      
      final totalEvaluations = evaluations.length;
      final totalPoints = evaluations.fold<int>(0, (sum, eval) => sum + eval.points);
      
      return {
        'totalEvaluations': totalEvaluations,
        'totalPoints': totalPoints,
      };
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –æ—Ü–µ–Ω–æ–∫: $e');
      return {
        'totalEvaluations': 0,
        'totalPoints': 0,
      };
    }
  }

  /// –ü–æ–ª—É—á–∏—Ç—å —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤ –ø–æ –æ—Ü–µ–Ω–∫–∞–º
  Future<List<Map<String, dynamic>>> getTopRatedPlayers({int limit = 10}) async {
    try {
      final querySnapshot = await _firestore
          .collection(_collection)
          .get();

      // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –∏–≥—Ä–æ–∫–∞–º –∏ —Å—á–∏—Ç–∞–µ–º –æ–±—â–∏–µ –±–∞–ª–ª—ã
      final Map<String, int> playerPoints = {};
      
      for (final doc in querySnapshot.docs) {
        final evaluation = PlayerEvaluationModel.fromMap(doc.data());
        playerPoints[evaluation.playerId] = 
            (playerPoints[evaluation.playerId] ?? 0) + evaluation.points;
      }

      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ø
      final sortedPlayers = playerPoints.entries.toList()
        ..sort((a, b) => b.value.compareTo(a.value));

      return sortedPlayers.take(limit).map((entry) => {
        'playerId': entry.key,
        'totalPoints': entry.value,
      }).toList();
    } catch (e) {
      debugPrint('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ç–æ–ø –∏–≥—Ä–æ–∫–æ–≤: $e');
      return [];
    }
  }


} 