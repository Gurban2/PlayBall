import 'package:flutter/material.dart';
import '../../core/theme/app_theme.dart';
import '../../core/utils/animation_utils.dart';
import '../../shared/widgets/enhanced_widgets.dart';
import '../../features/notifications/data/datasources/notification_demo_service.dart';
import '../../features/notifications/data/datasources/game_notification_service.dart';
import '../../features/auth/domain/entities/user_model.dart';

/// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–π —ç–∫—Ä–∞–Ω –¥–∏–∑–∞–π–Ω-—Å–∏—Å—Ç–µ–º—ã Material Design 3
class DesignDemoScreen extends StatefulWidget {
  const DesignDemoScreen({super.key});

  @override
  State<DesignDemoScreen> createState() => _DesignDemoScreenState();
}

class _DesignDemoScreenState extends State<DesignDemoScreen>
    with TickerProviderStateMixin {
  
  late AnimationController _mainController;
  late AnimationController _pulseController;
  late AnimationController _rotationController;
  
  bool _isDarkMode = false;
  bool _isLoading = false;
  String _selectedTab = 'buttons';
  
  final List<String> _tabs = [
    'buttons',
    'cards',
    'inputs',
    'animations',
    'notifications',
  ];

  @override
  void initState() {
    super.initState();
    
    _mainController = AnimationController(
      duration: const Duration(milliseconds: 800),
      vsync: this,
    );
    
    _pulseController = AnimationController(
      duration: const Duration(milliseconds: 1000),
      vsync: this,
    )..repeat(reverse: true);
    
    _rotationController = AnimationController(
      duration: const Duration(seconds: 2),
      vsync: this,
    )..repeat();
    
    _mainController.forward();
  }

  @override
  void dispose() {
    _mainController.dispose();
    _pulseController.dispose();
    _rotationController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('üé® Material Design 3'),
        actions: [
          // –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ç–µ–º—ã
          IconButton(
            icon: Icon(_isDarkMode ? Icons.light_mode : Icons.dark_mode),
            onPressed: () {
              setState(() {
                _isDarkMode = !_isDarkMode;
              });
              // TODO: –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ç–µ–º—ã –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
            },
            tooltip: '–ü–µ—Ä–µ–∫–ª—é—á–∏—Ç—å —Ç–µ–º—É',
          ),
          
          // –ö–Ω–æ–ø–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: () {
              _mainController.reset();
              _mainController.forward();
            },
            tooltip: '–û–±–Ω–æ–≤–∏—Ç—å –∞–Ω–∏–º–∞—Ü–∏–∏',
          ),
        ],
      ),
      
      body: Column(
        children: [
          // –¢–∞–±—ã
          _buildTabBar(),
          
          // –°–æ–¥–µ—Ä–∂–∏–º–æ–µ
          Expanded(
            child: AnimationUtils.fadeAnimation(
              child: _buildTabContent(),
              controller: _mainController,
            ),
          ),
        ],
      ),
      
      floatingActionButton: AnimationUtils.scaleAnimation(
        controller: _mainController,
        delay: const Duration(milliseconds: 600),
        child: FloatingActionButton.extended(
          onPressed: _showSuccessMessage,
          icon: const Icon(Icons.star),
          label: const Text('–ö—Ä—É—Ç–æ!'),
        ),
      ),
    );
  }

  /// –°—Ç—Ä–æ–∫–∞ —Ç–∞–±–æ–≤
  Widget _buildTabBar() {
    return Container(
      height: 60,
      padding: const EdgeInsets.symmetric(vertical: 8),
      child: ListView.builder(
        scrollDirection: Axis.horizontal,
        padding: const EdgeInsets.symmetric(horizontal: 16),
        itemCount: _tabs.length,
        itemBuilder: (context, index) {
          final tab = _tabs[index];
          final isSelected = tab == _selectedTab;
          
          return AnimationUtils.slideLeftAnimation(
            controller: _mainController,
            delay: Duration(milliseconds: index * 100),
            child: Padding(
              padding: const EdgeInsets.only(right: 8),
              child: FilterChip(
                label: Text(_getTabTitle(tab)),
                selected: isSelected,
                onSelected: (selected) {
                  if (selected) {
                    setState(() {
                      _selectedTab = tab;
                    });
                  }
                },
                avatar: Icon(_getTabIcon(tab), size: 16),
              ),
            ),
          );
        },
      ),
    );
  }

  /// –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤–∫–ª–∞–¥–∫–∏
  Widget _buildTabContent() {
    switch (_selectedTab) {
      case 'buttons':
        return _buildButtonsDemo();
      case 'cards':
        return _buildCardsDemo();
      case 'inputs':
        return _buildInputsDemo();
      case 'animations':
        return _buildAnimationsDemo();
      case 'notifications':
        return _buildNotificationsDemo();
      default:
        return const Center(child: Text('–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –≤–∫–ª–∞–¥–∫–∞'));
    }
  }

  /// –î–µ–º–æ –∫–Ω–æ–ø–æ–∫
  Widget _buildButtonsDemo() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildSectionHeader('–ö–Ω–æ–ø–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤'),
          const SizedBox(height: 16),
          
          // –û—Å–Ω–æ–≤–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
          Wrap(
            spacing: 12,
            runSpacing: 12,
            children: [
              EnhancedButton(
                text: '–ì–ª–∞–≤–Ω–∞—è',
                icon: Icons.home,
                onPressed: () => _showMessage('–ì–ª–∞–≤–Ω–∞—è –∫–Ω–æ–ø–∫–∞'),
              ),
              EnhancedButton(
                text: '–°–æ–∑–¥–∞—Ç—å',
                icon: Icons.add,
                type: ButtonType.secondary,
                onPressed: () => _showMessage('–°–æ–∑–¥–∞—Ç—å'),
              ),
              EnhancedButton(
                text: '–£–¥–∞–ª–∏—Ç—å',
                icon: Icons.delete,
                type: ButtonType.tertiary,
                customColor: Theme.of(context).colorScheme.error,
                onPressed: () => _showMessage('–£–¥–∞–ª–∏—Ç—å'),
              ),
            ],
          ),
          
          const SizedBox(height: 24),
          
          // –ö–Ω–æ–ø–∫–∏ —Ä–∞–∑–Ω—ã—Ö —Ä–∞–∑–º–µ—Ä–æ–≤
          _buildSectionHeader('–†–∞–∑–º–µ—Ä—ã –∫–Ω–æ–ø–æ–∫'),
          const SizedBox(height: 16),
          
          Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              EnhancedButton(
                text: '–ú–∞–ª–µ–Ω—å–∫–∞—è',
                icon: Icons.star,
                size: ButtonSize.small,
                onPressed: () => _showMessage('–ú–∞–ª–µ–Ω—å–∫–∞—è'),
              ),
              const SizedBox(height: 8),
              EnhancedButton(
                text: '–°—Ä–µ–¥–Ω—è—è',
                icon: Icons.star,
                size: ButtonSize.medium,
                onPressed: () => _showMessage('–°—Ä–µ–¥–Ω—è—è'),
              ),
              const SizedBox(height: 8),
              EnhancedButton(
                text: '–ë–æ–ª—å—à–∞—è',
                icon: Icons.star,
                size: ButtonSize.large,
                onPressed: () => _showMessage('–ë–æ–ª—å—à–∞—è'),
              ),
            ],
          ),
          
          const SizedBox(height: 24),
          
          // –ö–Ω–æ–ø–∫–∞ —Å –∑–∞–≥—Ä—É–∑–∫–æ–π
          _buildSectionHeader('–°–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫'),
          const SizedBox(height: 16),
          
          EnhancedButton(
            text: '–ó–∞–≥—Ä—É–∑–∫–∞...',
            icon: Icons.download,
            isLoading: _isLoading,
            isFullWidth: true,
            onPressed: _simulateLoading,
          ),
        ],
      ),
    );
  }

  /// –î–µ–º–æ –∫–∞—Ä—Ç–æ—á–µ–∫
  Widget _buildCardsDemo() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildSectionHeader('–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏'),
          const SizedBox(height: 16),
          
          GridView.count(
            shrinkWrap: true,
            physics: const NeverScrollableScrollPhysics(),
            crossAxisCount: 2,
            childAspectRatio: 1.2,
            mainAxisSpacing: 12,
            crossAxisSpacing: 12,
            children: [
              StatsCard(
                title: '–ò–≥—Ä—ã —Å—ã–≥—Ä–∞–Ω—ã',
                value: '42',
                icon: Icons.sports_volleyball,
                color: Theme.of(context).colorScheme.primary,
                subtitle: '+5 –∑–∞ –Ω–µ–¥–µ–ª—é',
                onTap: () => _showMessage('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏–≥—Ä'),
              ),
              StatsCard(
                title: '–ü–æ–±–µ–¥',
                value: '28',
                icon: Icons.emoji_events,
                color: AppTheme.successColor,
                subtitle: '66% –ø–æ–±–µ–¥',
                onTap: () => _showMessage('–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–±–µ–¥'),
              ),
              StatsCard(
                title: '–î—Ä—É–∑—å—è',
                value: '15',
                icon: Icons.people,
                color: Theme.of(context).colorScheme.secondary,
                subtitle: '3 –Ω–æ–≤—ã—Ö',
                onTap: () => _showMessage('–°–ø–∏—Å–æ–∫ –¥—Ä—É–∑–µ–π'),
              ),
              StatsCard(
                title: '–†–µ–π—Ç–∏–Ω–≥',
                value: '1250',
                icon: Icons.trending_up,
                color: AppTheme.warningColor,
                subtitle: '+50 –æ—á–∫–æ–≤',
                onTap: () => _showMessage('–†–µ–π—Ç–∏–Ω–≥'),
              ),
            ],
          ),
          
          const SizedBox(height: 24),
          
          _buildSectionHeader('–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–∞—Ä—Ç–æ—á–∫–∏'),
          const SizedBox(height: 16),
          
          EnhancedCard(
            onTap: () => _showMessage('–ö–∞—Ä—Ç–æ—á–∫–∞ –Ω–∞–∂–∞—Ç–∞'),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Row(
                  children: [
                    Icon(
                      Icons.notification_important,
                      color: Theme.of(context).colorScheme.primary,
                    ),
                    const SizedBox(width: 12),
                    Expanded(
                      child: Text(
                        '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
                        style: Theme.of(context).textTheme.titleMedium,
                      ),
                    ),
                    const Icon(Icons.arrow_forward_ios, size: 16),
                  ],
                ),
                const SizedBox(height: 8),
                Text(
                  '–ù–∞—Å—Ç—Ä–æ–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≤–∞—à–∏—Ö –∏–≥—Ä–∞—Ö.',
                  style: Theme.of(context).textTheme.bodyMedium,
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  /// –î–µ–º–æ –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
  Widget _buildInputsDemo() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildSectionHeader('–ü–æ–ª—è –≤–≤–æ–¥–∞'),
          const SizedBox(height: 16),
          
          const EnhancedTextField(
            label: '–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è',
            hint: '–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è',
            prefixIcon: Icons.person,
            isRequired: true,
          ),
          
          const SizedBox(height: 16),
          
          const EnhancedTextField(
            label: 'Email',
            hint: 'example@mail.com',
            prefixIcon: Icons.email,
            keyboardType: TextInputType.emailAddress,
            helperText: '–ú—ã –Ω–µ –±—É–¥–µ–º —Å–ø–∞–º–∏—Ç—å',
          ),
          
          const SizedBox(height: 16),
          
          const EnhancedTextField(
            label: '–ü–∞—Ä–æ–ª—å',
            hint: '–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å',
            prefixIcon: Icons.lock,
            suffixIcon: Icons.visibility_off,
            obscureText: true,
            isRequired: true,
          ),
          
          const SizedBox(height: 16),
          
          const EnhancedTextField(
            label: '–û–ø–∏—Å–∞–Ω–∏–µ',
            hint: '–†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ —Å–µ–±–µ...',
            prefixIcon: Icons.description,
            maxLines: 3,
          ),
          
          const SizedBox(height: 16),
          
          const EnhancedTextField(
            label: '–° –æ—à–∏–±–∫–æ–π',
            hint: '–≠—Ç–æ –ø–æ–ª–µ —Å –æ—à–∏–±–∫–æ–π',
            prefixIcon: Icons.error,
            errorText: '–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ',
          ),
        ],
      ),
    );
  }

  /// –î–µ–º–æ –∞–Ω–∏–º–∞—Ü–∏–π
  Widget _buildAnimationsDemo() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildSectionHeader('–ê–Ω–∏–º–∞—Ü–∏–∏'),
          const SizedBox(height: 16),
          
          // –ü—É–ª—å—Å–∏—Ä—É—é—â–∞—è –∞–Ω–∏–º–∞—Ü–∏—è
          Center(
            child: AnimationUtils.pulseAnimation(
              controller: _pulseController,
              child: Container(
                width: 100,
                height: 100,
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.primary,
                  shape: BoxShape.circle,
                ),
                child: const Icon(
                  Icons.favorite,
                  color: Colors.white,
                  size: 40,
                ),
              ),
            ),
          ),
          
          const SizedBox(height: 24),
          
          // –í—Ä–∞—â–∞—é—â–∞—è—Å—è –∞–Ω–∏–º–∞—Ü–∏—è
          Center(
            child: AnimationUtils.rotationAnimation(
              controller: _rotationController,
              child: Icon(
                Icons.sports_volleyball,
                size: 60,
                color: Theme.of(context).colorScheme.secondary,
              ),
            ),
          ),
          
          const SizedBox(height: 24),
          
          // –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–∞–≥—Ä—É–∑–∫–∏
          _buildSectionHeader('–ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã –∑–∞–≥—Ä—É–∑–∫–∏'),
          const SizedBox(height: 16),
          
          Row(
            mainAxisAlignment: MainAxisAlignment.spaceEvenly,
            children: [
              Column(
                children: [
                  const EnhancedLoadingIndicator(
                    style: LoadingStyle.circular,
                    size: 40,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '–ö—Ä—É–≥–æ–≤–æ–π',
                    style: Theme.of(context).textTheme.bodySmall,
                  ),
                ],
              ),
              Column(
                children: [
                  const EnhancedLoadingIndicator(
                    style: LoadingStyle.pulse,
                    size: 40,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '–ü—É–ª—å—Å',
                    style: Theme.of(context).textTheme.bodySmall,
                  ),
                ],
              ),
              Column(
                children: [
                  const EnhancedLoadingIndicator(
                    style: LoadingStyle.dots,
                    size: 40,
                  ),
                  const SizedBox(height: 8),
                  Text(
                    '–¢–æ—á–∫–∏',
                    style: Theme.of(context).textTheme.bodySmall,
                  ),
                ],
              ),
            ],
          ),
          
          const SizedBox(height: 24),
          
          // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ shake –∞–Ω–∏–º–∞—Ü–∏–∏
          Center(
            child: EnhancedButton(
              text: '–¢—Ä—è—Å–∫–∞!',
              icon: Icons.vibration,
              onPressed: _triggerShakeAnimation,
            ),
          ),
        ],
      ),
    );
  }

  /// –î–µ–º–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
  Widget _buildNotificationsDemo() {
    return SingleChildScrollView(
      padding: const EdgeInsets.all(16),
      child: Column(
        crossAxisAlignment: CrossAxisAlignment.start,
        children: [
          _buildSectionHeader('–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π'),
          const SizedBox(height: 16),
          
          Text(
            '–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã.',
            style: Theme.of(context).textTheme.bodyMedium,
          ),
          
          const SizedBox(height: 24),
          
          EnhancedButton(
            text: '–°–æ–∑–¥–∞—Ç—å –±–∞–∑–æ–≤—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            icon: Icons.notification_add,
            isFullWidth: true,
            onPressed: _createDemoNotifications,
          ),
          
          const SizedBox(height: 12),
          
          EnhancedButton(
            text: '–°–æ–∑–¥–∞—Ç—å —Ä–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è',
            icon: Icons.notifications_active,
            type: ButtonType.secondary,
            isFullWidth: true,
            onPressed: _createVarietyNotifications,
          ),
          
          const SizedBox(height: 12),
          
          EnhancedButton(
            text: 'Real-time —Å–∏–º—É–ª—è—Ü–∏—è',
            icon: Icons.stream,
            type: ButtonType.tertiary,
            isFullWidth: true,
            onPressed: _simulateRealTimeNotifications,
          ),
          
          const SizedBox(height: 24),
          
          const Divider(),
          
          const SizedBox(height: 24),
          
          _buildSectionHeader('–¢–∏–ø—ã —Å–Ω—ç–∫–±–∞—Ä–æ–≤'),
          const SizedBox(height: 16),
          
          Wrap(
            spacing: 12,
            runSpacing: 12,
            children: [
              EnhancedButton(
                text: '–£—Å–ø–µ—Ö',
                icon: Icons.check_circle,
                customColor: AppTheme.successColor,
                onPressed: () => _showSuccessMessage(),
              ),
              EnhancedButton(
                text: '–û—à–∏–±–∫–∞',
                icon: Icons.error,
                customColor: Theme.of(context).colorScheme.error,
                onPressed: () => _showErrorMessage(),
              ),
              EnhancedButton(
                text: '–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ',
                icon: Icons.warning,
                customColor: AppTheme.warningColor,
                onPressed: () => _showWarningMessage(),
              ),
            ],
          ),
        ],
      ),
    );
  }

  /// –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏
  Widget _buildSectionHeader(String title) {
    return AnimationUtils.slideUpAnimation(
      controller: _mainController,
      child: Text(
        title,
        style: Theme.of(context).textTheme.titleLarge?.copyWith(
          fontWeight: FontWeight.bold,
        ),
      ),
    );
  }

  // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã

  String _getTabTitle(String tab) {
    switch (tab) {
      case 'buttons':
        return '–ö–Ω–æ–ø–∫–∏';
      case 'cards':
        return '–ö–∞—Ä—Ç–æ—á–∫–∏';
      case 'inputs':
        return '–ü–æ–ª—è';
      case 'animations':
        return '–ê–Ω–∏–º–∞—Ü–∏–∏';
      case 'notifications':
        return '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è';
      default:
        return tab;
    }
  }

  IconData _getTabIcon(String tab) {
    switch (tab) {
      case 'buttons':
        return Icons.smart_button;
      case 'cards':
        return Icons.view_agenda;
      case 'inputs':
        return Icons.input;
      case 'animations':
        return Icons.animation;
      case 'notifications':
        return Icons.notifications;
      default:
        return Icons.help;
    }
  }

  void _showMessage(String message) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showSuccessMessage() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Row(
          children: [
            Icon(Icons.check_circle, color: Colors.white),
            SizedBox(width: 12),
            Text('–û–ø–µ—Ä–∞—Ü–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!'),
          ],
        ),
        backgroundColor: AppTheme.successColor,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showErrorMessage() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Row(
          children: [
            Icon(Icons.error, color: Colors.white),
            SizedBox(width: 12),
            Text('–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞!'),
          ],
        ),
        backgroundColor: Theme.of(context).colorScheme.error,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  void _showWarningMessage() {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: const Row(
          children: [
            Icon(Icons.warning, color: Colors.white),
            SizedBox(width: 12),
            Text('–í–Ω–∏–º–∞–Ω–∏–µ! –≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.'),
          ],
        ),
        backgroundColor: AppTheme.warningColor,
        behavior: SnackBarBehavior.floating,
      ),
    );
  }

  Future<void> _simulateLoading() async {
    setState(() {
      _isLoading = true;
    });

    await Future.delayed(const Duration(seconds: 2));

    setState(() {
      _isLoading = false;
    });

    _showSuccessMessage();
  }

  void _triggerShakeAnimation() {
    // TODO: –†–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å shake –∞–Ω–∏–º–∞—Ü–∏—é
    _showMessage('–¢—Ä—è—Å–∫–∞! ü´®');
  }

  Future<void> _createDemoNotifications() async {
    try {
      // –°–æ–∑–¥–∞–µ–º —Ñ–∏–∫—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –¥–µ–º–æ
      final demoUser = UserModel(
        id: 'demo_user_${DateTime.now().millisecondsSinceEpoch}',
        email: 'demo@playball.com',
        name: '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        role: UserRole.user,
        createdAt: DateTime.now(),
        gamesPlayed: 0,
        wins: 0,
        losses: 0,
      );

      final notificationService = GameNotificationService();
      final demoService = NotificationDemoService(notificationService);
      
      await demoService.createDemoNotifications(demoUser);
      
      _showSuccessMessage();
    } catch (e) {
      _showErrorMessage();
    }
  }

  Future<void> _createVarietyNotifications() async {
    try {
      final demoUser = UserModel(
        id: 'demo_user_${DateTime.now().millisecondsSinceEpoch}',
        email: 'demo@playball.com',
        name: '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        role: UserRole.user,
        createdAt: DateTime.now(),
        gamesPlayed: 0,
        wins: 0,
        losses: 0,
      );

      final notificationService = GameNotificationService();
      final demoService = NotificationDemoService(notificationService);
      
      await demoService.createVarietyDemoNotifications(demoUser);
      
      _showSuccessMessage();
    } catch (e) {
      _showErrorMessage();
    }
  }

  Future<void> _simulateRealTimeNotifications() async {
    try {
      final demoUser = UserModel(
        id: 'demo_user_${DateTime.now().millisecondsSinceEpoch}',
        email: 'demo@playball.com',
        name: '–î–µ–º–æ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
        role: UserRole.user,
        createdAt: DateTime.now(),
        gamesPlayed: 0,
        wins: 0,
        losses: 0,
      );

      final notificationService = GameNotificationService();
      final demoService = NotificationDemoService(notificationService);
      
      _showMessage('–°–∏–º—É–ª—è—Ü–∏—è –∑–∞–ø—É—â–µ–Ω–∞...');
      await demoService.simulateRealTimeNotifications(demoUser);
      
      _showSuccessMessage();
    } catch (e) {
      _showErrorMessage();
    }
  }
} 